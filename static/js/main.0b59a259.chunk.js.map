{"version":3,"sources":["helpers/utils.js","components/individualTeamStats.js","components/combinedTeamStats.js","helpers/statsHelper.js","components/teamRecords.js","components/teamStats.js","components/players.js","components/playerRecords.js","components/playerStats.js","components/stats.js","App.js","index.js"],"names":["capitalizeText","stringArray","stringArrayAsString","forEach","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","IndividualTeamStats","props","day","stats","awayWins","homeWins","cupWins","cupLosses","awayLosses","homeLosses","homeDraws","awayDraws","stanningleyAgg","stanningleyTotalPoints","opponentAgg","opponentTotalPoints","beaten","beatenBy","drawnWith","totalDraws","totalWins","totalLosses","totalGames","id","CombinedTeamStats","combinedStats","statsArray","combinedAwayWins","combinedHomeWins","combinedCupWins","combinedAwayLosses","combinedHomeLosses","combinedCupLosses","combinedHomeDraws","combinedAwayDraws","combinedStanningleyAgg","combinedStanningleyTotalPoints","combinedOpponentAgg","combinedOpponentTotalPoints","combinedBeaten","combinedBeatenBy","combinedDrawnWith","push","combineTeamStats","TeamRecords","bestWinPercentage","bestWinPercentageTeam","bestTeamPointsPerGame","bestTeamPointsPerGameTeam","bestTeamAggPerGame","bestTeamAggPerGameTeam","fewestPointsConcededPerGame","fewestPointsConcededPerGameTeam","lowestAggConcededPerGame","lowestAggConcededPerGameTeam","wins","draws","winPercentage","gamesPerMatch","pointsPerGame","aggPerGame","pointsConcededPerGame","aggConcededPerGame","pop","toFixed","TeamStats","useState","showStats","setShowStats","buttonText","setButtonText","teamStats","bowlsStats","teamResults","mondayStats","tuesdayStats","thursdayStats","saturdayStats","Button","variant","size","onClick","Players","player","playersStats","name","playerData","totalAgg","totalAggAgainst","totalPairsAgg","totalPairsAggAgainst","totalScore","totalScoreAgainst","winningPairsPartners","losingPairsPartners","beatenByTeam","beatenOpponents","beatenTeam","dayPlayed","pairLosses","pairWins","pairsPartners","totalHomeAgg","totalHomeAggAgainst","totalAwayAgg","totalAwayAggAgainst","totalHomeScore","totalHomeScoreAgainst","totalAwayScore","totalAwayScoreAgainst","gamesPlayed","homeGamesPlayed","awayGamesPlayed","average","homeAverage","awayAverage","averageScore","averageScoreAgainst","homeAverageScore","homeAverageScoreAgainst","awayAverageScore","awayAverageScoreAgainst","pairsGames","daysPlayedCount","daysPlayed","monday","filter","toLowerCase","length","tuesday","thursday","saturday","calculateDaysPlayedCount","pairsPartnersCount","calculatePairsPartnersCount","pairsPartnersCountWins","pairsPartnersCountLosses","allPairsPartners","uniquePartners","partner","indexOf","partnersReturnObj","reduce","partnerObj","timesPaired","includes","ListGroup","Item","map","key","Math","floor","random","Object","keys","PlayerRecords","players","mostGamesPlayer","mostGames","mostWinsPlayer","mostWins","bestWinPercPlayer","bestWinPerc","bestAveragePlayer","bestAverage","bestScorePlayer","bestScore","p","playedMinGames","winPerc","score","PlayerStats","playerResults","playerName","JSON","stringify","Stats","showTeamStats","setShowTeamStats","App","style","fontSize","rel","href","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b59a259.chunk.js","sourcesContent":["export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] =\n                array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        });\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString =\n            index === 0\n                ? capitalizedString\n                : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction IndividualTeamStats(props) {\n    const day = props.day;\n    const stats = props.stats;\n\n    const {\n        awayWins,\n        homeWins,\n        cupWins,\n        cupLosses,\n        awayLosses,\n        homeLosses,\n        homeDraws,\n        awayDraws,\n        stanningleyAgg,\n        stanningleyTotalPoints,\n        opponentAgg,\n        opponentTotalPoints,\n        beaten,\n        beatenBy,\n        drawnWith,\n    } = stats;\n\n    const totalDraws = awayDraws + homeDraws;\n    const totalWins = awayWins + homeWins + cupWins;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return (\n        <div id={day + 'TeamResults'}>\n            <h4>Stats for {day}</h4>\n            <div id={day + 'TeamWinLosses'}>\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && (\n                    <p>\n                        ({homeWins} home, {awayWins} away, {cupWins} cup)\n                    </p>\n                )}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && (\n                    <p>\n                        ({homeLosses} home, {awayLosses} away, {cupLosses} cup)\n                    </p>\n                )}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && (\n                    <p>\n                        ({homeDraws} home, {awayDraws} away)\n                    </p>\n                )}\n            </div>\n            <div id={day + 'TeamAggregates'}>\n                <p>Stanningley aggregate = {stanningleyAgg}</p>\n                <p>Opponents aggregate = {opponentAgg}</p>\n                <p>Stanningley team score = {stanningleyTotalPoints}</p>\n                <p>Opponents team score = {opponentTotalPoints}</p>\n            </div>\n            <div id={day + 'TeamOpponents'}>\n                {totalWins > 0 && (\n                    <p>Teams beaten = {capitalizeText(beaten)}</p>\n                )}\n                {totalLosses > 0 && (\n                    <p>Teams lost to = {capitalizeText(beatenBy)}</p>\n                )}\n                {totalDraws > 0 && (\n                    <p>Teams drawn with = {capitalizeText(drawnWith)}</p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default IndividualTeamStats;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\nimport { combineTeamStats } from '../helpers/statsHelper';\n\nfunction CombinedTeamStats(props) {\n    const stats = props.stats;\n\n    const combinedStats = combineTeamStats(stats);\n    const {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupWins,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    } = combinedStats;\n\n    return (\n        <div id=\"CombinedTeamResults\">\n            <h3>Combined Stats For All Teams</h3>\n            <div id=\"CombinedTeamWinLosses\">\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && (\n                    <p>\n                        ({combinedHomeWins} home, {combinedAwayWins} away,{' '}\n                        {combinedCupWins} cup)\n                    </p>\n                )}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && (\n                    <p>\n                        ({combinedHomeLosses} home, {combinedAwayLosses} away,{' '}\n                        {combinedCupLosses} cup)\n                    </p>\n                )}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && (\n                    <p>\n                        ({combinedHomeDraws} home, {combinedAwayDraws} away)\n                    </p>\n                )}\n            </div>\n            <div id=\"CombinedTeamAggregates\">\n                <p>Stanningley aggregate = {combinedStanningleyAgg}</p>\n                <p>Opponents aggregate = {combinedOpponentAgg}</p>\n                <p>Stanningley team score = {combinedStanningleyTotalPoints}</p>\n                <p>Opponents team score = {combinedOpponentTotalPoints}</p>\n            </div>\n            <div id=\"CombinedTeamOpponents\">\n                {totalWins > 0 && (\n                    <p>Teams beaten = {capitalizeText(combinedBeaten)}</p>\n                )}\n                {totalLosses > 0 && (\n                    <p>Teams lost to = {capitalizeText(combinedBeatenBy)}</p>\n                )}\n                {totalDraws > 0 && (\n                    <p>\n                        Teams drawn with = {capitalizeText(combinedDrawnWith)}\n                    </p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default CombinedTeamStats;\n","export function combineTeamStats(statsArray) {\n    let combinedAwayWins = 0;\n    let combinedHomeWins = 0;\n    let combinedCupWins = 0;\n    let combinedAwayLosses = 0;\n    let combinedHomeLosses = 0;\n    let combinedCupLosses = 0;\n    let combinedHomeDraws = 0;\n    let combinedAwayDraws = 0;\n    let combinedStanningleyAgg = 0;\n    let combinedStanningleyTotalPoints = 0;\n    let combinedOpponentAgg = 0;\n    let combinedOpponentTotalPoints = 0;\n    let combinedBeaten = [];\n    let combinedBeatenBy = [];\n    let combinedDrawnWith = [];\n\n    statsArray.forEach((stats) => {\n        const {\n            awayWins,\n            homeWins,\n            cupWins,\n            awayLosses,\n            homeLosses,\n            cupLosses,\n            homeDraws,\n            awayDraws,\n            stanningleyAgg,\n            stanningleyTotalPoints,\n            opponentAgg,\n            opponentTotalPoints,\n            beaten,\n            beatenBy,\n            drawnWith,\n        } = stats;\n        combinedAwayWins += awayWins;\n        combinedHomeWins += homeWins;\n        combinedAwayLosses += awayLosses;\n        combinedHomeLosses += homeLosses;\n        combinedHomeDraws += homeDraws;\n        combinedAwayDraws += awayDraws;\n        combinedCupWins += cupWins;\n        combinedCupLosses += cupLosses;\n        combinedStanningleyAgg += stanningleyAgg;\n        combinedStanningleyTotalPoints += stanningleyTotalPoints;\n        combinedOpponentAgg += opponentAgg;\n        combinedOpponentTotalPoints += opponentTotalPoints;\n        combinedBeaten.push(...beaten);\n        combinedBeatenBy.push(...beatenBy);\n        combinedDrawnWith.push(...drawnWith);\n    });\n\n    const totalDraws = combinedAwayDraws + combinedHomeDraws;\n    const totalWins = combinedAwayWins + combinedHomeWins + combinedCupWins;\n    const totalLosses =\n        combinedAwayLosses + combinedHomeLosses + combinedCupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedCupWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    };\n}\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction TeamRecords(props) {\n    const statsArray = props.stats;\n\n    let bestWinPercentage = -1;\n    let bestWinPercentageTeam = [];\n    let bestTeamPointsPerGame = -1;\n    let bestTeamPointsPerGameTeam = [];\n    let bestTeamAggPerGame = -1;\n    let bestTeamAggPerGameTeam = [];\n    let fewestPointsConcededPerGame = 100;\n    let fewestPointsConcededPerGameTeam = [];\n    let lowestAggConcededPerGame = 1000;\n    let lowestAggConcededPerGameTeam = [];\n\n    statsArray.forEach((stats) => {\n        const {\n            day,\n            awayWins,\n            homeWins,\n            cupWins,\n            awayLosses,\n            homeLosses,\n            cupLosses,\n            homeDraws,\n            awayDraws,\n            stanningleyAgg,\n            stanningleyTotalPoints,\n            opponentAgg,\n            opponentTotalPoints,\n        } = stats;\n        const wins = awayWins + homeWins + cupWins;\n        const losses = awayLosses + homeLosses + cupLosses;\n        const draws = awayDraws + homeDraws;\n        const drawPoints = draws > 0 ? draws * 0.5 : 0;\n        const totalGames = wins + losses + homeDraws + awayDraws;\n        const winPercentage = ((wins + drawPoints) / totalGames) * 100;\n\n        const gamesPerMatch = day === 'Monday' ? 6 : 8;\n        const pointsPerGame =\n            stanningleyTotalPoints /\n            gamesPerMatch /\n            (totalGames - cupLosses - cupWins); // cup games are decided on pure aggregate\n        const aggPerGame = stanningleyAgg / gamesPerMatch / totalGames;\n        const pointsConcededPerGame =\n            opponentTotalPoints /\n            gamesPerMatch /\n            (totalGames - cupLosses - cupWins);\n        const aggConcededPerGame = opponentAgg / gamesPerMatch / totalGames;\n\n        if (aggPerGame >= bestTeamAggPerGame) {\n            if (aggPerGame !== bestTeamAggPerGame) {\n                bestTeamAggPerGameTeam.pop();\n            }\n            bestTeamAggPerGameTeam.push(`${day} (${totalGames} games)`);\n            bestTeamAggPerGame = aggPerGame;\n        }\n        if (pointsPerGame >= bestTeamPointsPerGame) {\n            if (pointsPerGame !== bestTeamPointsPerGame) {\n                bestTeamPointsPerGameTeam.pop();\n            }\n            bestTeamPointsPerGameTeam.push(`${day} (${totalGames} games)`);\n            bestTeamPointsPerGame = pointsPerGame;\n        }\n        if (pointsConcededPerGame <= fewestPointsConcededPerGame) {\n            if (pointsConcededPerGame !== fewestPointsConcededPerGame) {\n                fewestPointsConcededPerGameTeam.pop();\n            }\n            fewestPointsConcededPerGameTeam.push(\n                `${day} (${totalGames} games)`\n            );\n            fewestPointsConcededPerGame = pointsConcededPerGame;\n        }\n        if (aggConcededPerGame <= lowestAggConcededPerGame) {\n            if (aggConcededPerGame !== lowestAggConcededPerGame) {\n                lowestAggConcededPerGameTeam.pop();\n            }\n            lowestAggConcededPerGameTeam.push(`${day} (${totalGames} games)`);\n            lowestAggConcededPerGame = aggConcededPerGame;\n        }\n        if (winPercentage >= bestWinPercentage) {\n            if (winPercentage !== bestWinPercentage) {\n                bestWinPercentageTeam.pop();\n            }\n            bestWinPercentageTeam.push(`${day} (${totalGames} games)`);\n            bestWinPercentage = winPercentage;\n        }\n    });\n\n    return (\n        <div id=\"TeamRecords\">\n            <h3>Team Records</h3>\n            {bestWinPercentage > 0 && (\n                <div>\n                    <p>\n                        Best win percentage = {bestWinPercentage.toFixed(0)}% -{' '}\n                        {capitalizeText(bestWinPercentageTeam)}\n                    </p>\n                </div>\n            )}\n\n            {bestTeamPointsPerGame > 0 && (\n                <div>\n                    <p>\n                        Best points per game ={' '}\n                        {bestTeamPointsPerGame.toFixed(1)} / 5 -{' '}\n                        {capitalizeText(bestTeamPointsPerGameTeam)}\n                    </p>\n                </div>\n            )}\n            {bestTeamAggPerGame > 0 && (\n                <div>\n                    <p>\n                        Best agg per game = {bestTeamAggPerGame.toFixed(1)} / 21\n                        - {capitalizeText(bestTeamAggPerGameTeam)}\n                    </p>\n                </div>\n            )}\n            {fewestPointsConcededPerGame >= 0 && (\n                <div>\n                    <p>\n                        Fewest points conceded per game ={' '}\n                        {fewestPointsConcededPerGame.toFixed(1)} / 5 -{' '}\n                        {capitalizeText(fewestPointsConcededPerGameTeam)}\n                    </p>\n                </div>\n            )}\n\n            {lowestAggConcededPerGame > 0 && (\n                <div>\n                    <p>\n                        Fewest aggregated points conceded per game ={' '}\n                        {lowestAggConcededPerGame.toFixed(1)} / 21 -{' '}\n                        {capitalizeText(lowestAggConcededPerGameTeam)}\n                    </p>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default TeamRecords;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport IndividualTeamStats from './individualTeamStats';\nimport CombinedTeamStats from './combinedTeamStats';\nimport TeamRecords from './teamRecords';\nimport bowlsStats from '../helpers/bowlsStats.json';\n\nfunction TeamStats() {\n    const [showStats, setShowStats] = useState(false);\n    const [buttonText, setButtonText] = useState('Show Team Stats');\n\n    const teamStats = bowlsStats.teamResults;\n    // TODO get the teamStats in a better way that using array\n    const mondayStats = teamStats[0];\n    const tuesdayStats = teamStats[1];\n    const thursdayStats = teamStats[2];\n    const saturdayStats = teamStats[3];\n\n    function toggleTeamStats() {\n        if (showStats) {\n            setShowStats(false);\n            setButtonText('Show Team Stats');\n        } else {\n            setShowStats(true);\n            setButtonText('Hide Team Stats');\n        }\n    }\n\n    return (\n        <div id=\"TeamStats\">\n            <h1>Team Stats</h1>\n            <TeamRecords stats={teamStats} />\n            <CombinedTeamStats stats={teamStats} />\n\n            <Button variant=\"light\" size=\"lg\" onClick={toggleTeamStats}>\n                {buttonText}\n            </Button>\n            <br />\n            <br />\n\n            {showStats && (\n                <div>\n                    <IndividualTeamStats day=\"Monday\" stats={mondayStats} />\n                    <IndividualTeamStats day=\"Tuesday\" stats={tuesdayStats} />\n                    <IndividualTeamStats day=\"Thursday\" stats={thursdayStats} />\n                    <IndividualTeamStats day=\"Saturday\" stats={saturdayStats} />\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default TeamStats;\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction Players(props) {\n    const index = props.index;\n    const player = props.player;\n    const playersStats = props.playersStats;\n    const name = props.name;\n\n    const playerData = playersStats[player];\n    let {\n        totalAgg,\n        totalAggAgainst,\n        totalPairsAgg,\n        totalPairsAggAgainst,\n        totalScore,\n        totalScoreAgainst,\n        awayLosses,\n        homeLosses,\n        cupLosses,\n        homeWins,\n        awayWins,\n        cupWins,\n        winningPairsPartners,\n        losingPairsPartners,\n        beatenBy,\n        beatenByTeam,\n        beatenOpponents,\n        beatenTeam,\n        dayPlayed,\n        pairLosses,\n        pairWins,\n        pairsPartners,\n        totalHomeAgg,\n        totalHomeAggAgainst,\n        totalAwayAgg,\n        totalAwayAggAgainst,\n        totalHomeScore,\n        totalHomeScoreAgainst,\n        totalAwayScore,\n        totalAwayScoreAgainst,\n    } = playerData;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalWins = awayWins + homeWins + cupWins;\n    const gamesPlayed = totalLosses + totalWins;\n    const homeGamesPlayed = homeWins + homeLosses;\n    const awayGamesPlayed = awayWins + awayLosses;\n    const average = (totalAgg - totalAggAgainst) / gamesPlayed;\n    const homeAverage = (totalHomeAgg - totalHomeAggAgainst) / homeGamesPlayed;\n    const awayAverage = (totalAwayAgg - totalAwayAggAgainst) / awayGamesPlayed;\n    const averageScore = totalScore / gamesPlayed;\n    const averageScoreAgainst = totalScoreAgainst / gamesPlayed;\n    const homeAverageScore = totalHomeScore / homeGamesPlayed;\n    const homeAverageScoreAgainst = totalHomeScoreAgainst / homeGamesPlayed;\n    const awayAverageScore = totalAwayScore / awayGamesPlayed;\n    const awayAverageScoreAgainst = totalAwayScoreAgainst / awayGamesPlayed;\n    beatenBy = capitalizeText(beatenBy);\n    beatenOpponents = capitalizeText(beatenOpponents);\n    beatenByTeam = capitalizeText(beatenByTeam);\n    beatenTeam = capitalizeText(beatenTeam);\n    const pairsGames = pairLosses + pairWins;\n\n    const daysPlayedCount = calculateDaysPlayedCount(dayPlayed);\n    const pairsPartnersCount = calculatePairsPartnersCount(pairsPartners);\n    const pairsPartnersCountWins =\n        calculatePairsPartnersCount(winningPairsPartners);\n    const pairsPartnersCountLosses =\n        calculatePairsPartnersCount(losingPairsPartners);\n\n    function calculatePairsPartnersCount(allPairsPartners) {\n        const uniquePartners = allPairsPartners.filter((partner, index) => {\n            return allPairsPartners.indexOf(partner) === index;\n        });\n        const partnersReturnObj = uniquePartners.reduce(\n            (partnerObj, player) => {\n                partnerObj[player] = { timesPaired: 0 };\n                return partnerObj;\n            },\n            {}\n        );\n\n        allPairsPartners.forEach((partner) => {\n            if (uniquePartners.includes(partner)) {\n                partnersReturnObj[partner].timesPaired += 1;\n            }\n        });\n        return partnersReturnObj;\n    }\n\n    function calculateDaysPlayedCount(daysPlayed) {\n        const monday = daysPlayed.filter(\n            (day) => day.toLowerCase() === 'monday'\n        ).length;\n        const tuesday = daysPlayed.filter(\n            (day) => day.toLowerCase() === 'tuesday'\n        ).length;\n        const thursday = daysPlayed.filter(\n            (day) => day.toLowerCase() === 'thursday'\n        ).length;\n        const saturday = daysPlayed.filter(\n            (day) => day.toLowerCase() === 'saturday'\n        ).length;\n\n        const returnObj = [\n            { day: 'Monday', gamesPlayed: monday },\n            { day: 'Tuesday', gamesPlayed: tuesday },\n            { day: 'Thursday', gamesPlayed: thursday },\n            { day: 'Saturday', gamesPlayed: saturday },\n        ];\n\n        return returnObj.filter((day) => day.gamesPlayed > 0);\n    }\n\n    // TODO handle plurals\n    return (\n        <div>\n            <ListGroup.Item key={index}>\n                <div>\n                    <h4>{capitalizeText([name])}</h4>\n                    {gamesPlayed === 0 && <p>No games played</p>}\n                    {gamesPlayed > 0 && (\n                        <div>\n                            <h5>Games</h5>\n                            <p>{gamesPlayed} games played in total</p>\n                            {daysPlayedCount.map((day) => {\n                                const key = Math.floor(\n                                    Math.random() * 100000 + index\n                                );\n                                return (\n                                    <p key={key}>\n                                        {day.gamesPlayed} games played on{' '}\n                                        {day.day}\n                                    </p>\n                                );\n                            })}\n                            {pairsGames > 0 && (\n                                <p>{pairsGames} pairs games played</p>\n                            )}\n\n                            <h5>Results</h5>\n                            {totalWins > 0 && (\n                                <p>\n                                    {totalWins} wins ({homeWins} home,{' '}\n                                    {awayWins} away, {cupWins} cup)\n                                </p>\n                            )}\n                            {totalLosses > 0 && (\n                                <p>\n                                    {totalLosses} losses ({homeLosses} home,{' '}\n                                    {awayLosses} away, {cupLosses} cup)\n                                </p>\n                            )}\n                            <p>\n                                {((totalWins / gamesPlayed) * 100).toFixed(0)}%\n                                win percentage\n                            </p>\n\n                            {pairsGames > 0 && (\n                                <div>\n                                    <h5>Pairs</h5>\n                                    <p>{pairsGames} pairs games played</p>\n                                    <p>{pairWins} pairs wins</p>\n                                    <p>{pairLosses} pairs losses</p>\n                                    {pairsPartners.length > 0 &&\n                                        Object.keys(pairsPartnersCount).map(\n                                            (partner) => {\n                                                const key = Math.floor(\n                                                    Math.random() * 100000 +\n                                                        index\n                                                );\n                                                return (\n                                                    <p key={key}>\n                                                        {\n                                                            pairsPartnersCount[\n                                                                partner\n                                                            ].timesPaired\n                                                        }{' '}\n                                                        games played with{' '}\n                                                        {partner}\n                                                    </p>\n                                                );\n                                            }\n                                        )}\n                                    {pairWins > 0 &&\n                                        Object.keys(pairsPartnersCountWins).map(\n                                            (partner) => {\n                                                const key = Math.floor(\n                                                    Math.random() * 100000 +\n                                                        index\n                                                );\n                                                return (\n                                                    <p key={key}>\n                                                        {\n                                                            pairsPartnersCountWins[\n                                                                partner\n                                                            ].timesPaired\n                                                        }{' '}\n                                                        games won with {partner}\n                                                    </p>\n                                                );\n                                            }\n                                        )}\n                                    {pairLosses > 0 &&\n                                        Object.keys(\n                                            pairsPartnersCountLosses\n                                        ).map((partner) => {\n                                            const key = Math.floor(\n                                                Math.random() * 100000 + index\n                                            );\n                                            return (\n                                                <p key={key}>\n                                                    {\n                                                        pairsPartnersCountLosses[\n                                                            partner\n                                                        ].timesPaired\n                                                    }{' '}\n                                                    games lost with {partner}\n                                                </p>\n                                            );\n                                        })}\n                                </div>\n                            )}\n\n                            <h5>Opponents</h5>\n                            {beatenOpponents.length > 0 && (\n                                <p>Beaten opponents = {beatenOpponents}</p>\n                            )}\n                            {beatenBy.length > 0 && (\n                                <p>Defeated by = {beatenBy}</p>\n                            )}\n                            {beatenTeam.length > 0 && (\n                                <p>Beaten team = {beatenTeam}</p>\n                            )}\n                            {beatenByTeam.length > 0 && (\n                                <p>Teams lost to = {beatenByTeam}</p>\n                            )}\n\n                            <div>\n                                <h5>Averages</h5>\n                                {average >= -21 && (\n                                    <div>\n                                        <p>Average = {average.toFixed(2)}</p>\n                                        {homeAverage > -22 && (\n                                            <p>\n                                                Home average =\n                                                {homeAverage.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {awayAverage > -22 && (\n                                            <p>\n                                                Away average =\n                                                {awayAverage.toFixed(2)}\n                                            </p>\n                                        )}\n                                    </div>\n                                )}\n                                {averageScore >= 0 && (\n                                    <div>\n                                        <p>\n                                            Average score ={' '}\n                                            {averageScore.toFixed(2)} / 5\n                                        </p>\n                                        <p>\n                                            Average opponents score ={' '}\n                                            {averageScoreAgainst.toFixed(2)} / 5\n                                        </p>\n                                        {homeAverageScore >= 0 && (\n                                            <div>\n                                                <p>\n                                                    Average home score ={' '}\n                                                    {homeAverageScore.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                                <p>\n                                                    Average home opponents score\n                                                    ={' '}\n                                                    {homeAverageScoreAgainst.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                            </div>\n                                        )}\n                                        {awayAverageScore >= 0 && (\n                                            <div>\n                                                <p>\n                                                    Average away score ={' '}\n                                                    {awayAverageScore.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                                <p>\n                                                    Average away opponents score\n                                                    ={' '}\n                                                    {awayAverageScoreAgainst.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                            </div>\n                                        )}\n                                    </div>\n                                )}\n\n                                <h5>Aggregates</h5>\n                                <p>\n                                    <b>Points</b>\n                                </p>\n                                <p>\n                                    Total aggregate scored = {totalAgg} /{' '}\n                                    {gamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total aggregate conceded = {totalAggAgainst}{' '}\n                                    / {gamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total home aggregate scored = {totalHomeAgg}{' '}\n                                    / {homeGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total home aggregate conceded ={' '}\n                                    {totalHomeAggAgainst} /{' '}\n                                    {homeGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total away aggregate scored = {totalAwayAgg}{' '}\n                                    / {awayGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total away aggregate conceded ={' '}\n                                    {totalAwayAggAgainst} /{' '}\n                                    {awayGamesPlayed * 21}\n                                </p>\n                                {pairsGames > 0 && (\n                                    <p>\n                                        Total pairs aggregate scored ={' '}\n                                        {totalPairsAgg} / {pairsGames * 21}\n                                    </p>\n                                )}\n                                {pairsGames > 0 && (\n                                    <p>\n                                        Total pairs aggregate conceded =\n                                        {totalPairsAggAgainst} /\n                                        {pairsGames * 21}\n                                    </p>\n                                )}\n\n                                <p>\n                                    <b>Team Points</b>\n                                </p>\n                                <p>\n                                    Total points scored = {totalScore} /{' '}\n                                    {gamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total points conceded = {totalScoreAgainst}{' '}\n                                    / {gamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total home points scored = {totalHomeScore}{' '}\n                                    / {homeGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total home points conceded ={' '}\n                                    {totalHomeScoreAgainst} /{' '}\n                                    {homeGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total away points scored = {totalAwayScore}/{' '}\n                                    {awayGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total away points conceded ={' '}\n                                    {totalAwayScoreAgainst} /{' '}\n                                    {awayGamesPlayed * 5}\n                                </p>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </ListGroup.Item>\n        </div>\n    );\n}\n\nexport default Players;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction PlayerRecords(props) {\n    const playersStats = props.playersStats;\n    const players = Object.keys(playersStats);\n\n    let mostGamesPlayer = [];\n    let mostGames = 0;\n    let mostWinsPlayer = [];\n    let mostWins = 0;\n    let bestWinPercPlayer = [];\n    let bestWinPerc = 0;\n    let bestAveragePlayer = [];\n    let bestAverage = -21;\n    let bestScorePlayer = [];\n    let bestScore = 0;\n\n    players.forEach((player) => {\n        const p = playersStats[player];\n        const totalWins = p.awayWins + p.homeWins + p.cupWins;\n        const totalLosses = p.awayLosses + p.homeLosses + p.cupLosses;\n        const totalGames = totalWins + totalLosses;\n\n        const playedMinGames = totalGames >= 6 ? true : false;\n        // TODO the python script is picking up players matches for other teams e.g. Mario/ Shirley\n        if (totalGames >= mostGames) {\n            if (totalGames > mostGames) {\n                mostGamesPlayer = [];\n                mostGames = totalGames;\n            }\n            mostGamesPlayer.push(player);\n        }\n        if (totalWins >= mostWins) {\n            if (totalWins > mostWins) {\n                mostWinsPlayer = [];\n                mostWins = totalWins;\n            }\n            mostWinsPlayer.push(`${player} -${totalGames} games`);\n        }\n        const winPerc = (totalWins / totalGames) * 100;\n        if (winPerc >= bestWinPerc && playedMinGames) {\n            if (winPerc > bestWinPerc) {\n                bestWinPercPlayer = [];\n                bestWinPerc = winPerc;\n            }\n            bestWinPercPlayer.push(`${player} - ${totalGames} games`);\n        }\n        const average = (p.totalAgg - p.totalAggAgainst) / totalGames;\n        if (average >= bestAverage && playedMinGames) {\n            if (average > bestAverage) {\n                bestAveragePlayer = [];\n                bestAverage = average;\n            }\n            bestAveragePlayer.push(`${player} - ${totalGames} games`);\n        }\n\n        const score = p.totalScore / totalGames;\n        if (score >= bestScore && playedMinGames) {\n            if (score > bestScore) {\n                bestScorePlayer = [];\n                bestScore = score;\n            }\n            bestScorePlayer.push(`${player} - ${totalGames} games`);\n        }\n    });\n\n    return (\n        <div>\n            <h3>Player Records</h3>\n            {mostGames > 0 && (\n                <p>\n                    Most games played = {mostGames} (\n                    {capitalizeText(mostGamesPlayer)})\n                </p>\n            )}\n            {mostWins > 0 && (\n                <p>\n                    Most wins = {mostWins} ({capitalizeText(mostWinsPlayer)})\n                </p>\n            )}\n            {bestWinPerc > 0 && (\n                <p>\n                    Best win percentage = {bestWinPerc.toFixed(0)}% (\n                    {capitalizeText(bestWinPercPlayer)})\n                </p>\n            )}\n            {bestAverage > -21 && (\n                <p>\n                    Best average = {bestAverage.toFixed(2)} (\n                    {capitalizeText(bestAveragePlayer)})\n                </p>\n            )}\n            {bestScore > 0 && (\n                <p>\n                    Best average team score per game = {bestScore.toFixed(2)} (\n                    {capitalizeText(bestScorePlayer)})\n                </p>\n            )}\n            <p>* minimum of 6 games played</p>\n        </div>\n    );\n}\n\nexport default PlayerRecords;\n","import React, { useState } from 'react';\nimport Player from './players';\nimport PlayerRecords from './playerRecords';\nimport { ListGroup, Button } from 'react-bootstrap';\nimport bowlsStats from '../helpers/bowlsStats.json';\n\nfunction PlayerStats() {\n    const [showStats, setShowStats] = useState(false);\n    const [buttonText, setButtonText] = useState('Show Player Stats');\n\n    const playersStats = bowlsStats.playerResults;\n    const keys = Object.keys(playersStats);\n\n    function togglePlayerStats() {\n        if (showStats) {\n            setShowStats(false);\n            setButtonText('Show Player Stats');\n        } else {\n            setShowStats(true);\n            setButtonText('Hide Player Stats');\n        }\n    }\n\n    return (\n        <div>\n            <h1>Player Stats</h1>\n            <PlayerRecords playersStats={playersStats} />\n            <Button variant=\"light\" size=\"lg\" onClick={togglePlayerStats}>\n                {buttonText}\n            </Button>\n            <br />\n            <br />\n            {showStats && (\n                <div id=\"player-stats\">\n                    <ListGroup>\n                        {keys.map((p, index) => {\n                            const playerName = keys[index];\n                            return (\n                                <Player\n                                    key={index}\n                                    index={index}\n                                    player={p}\n                                    name={playerName}\n                                    playersStats={playersStats}\n                                >\n                                    {JSON.stringify(playersStats[p])}\n                                </Player>\n                            );\n                        })}\n                    </ListGroup>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default PlayerStats;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TeamStats from './teamStats';\nimport PlayerStats from './playerStats';\n\nfunction Stats() {\n    const [showStats, setShowStats] = useState(false);\n    const [showTeamStats, setShowTeamStats] = useState(false);\n\n    // TODO decide how to display this information. Maybe records together? Use a nav bar?\n    // TODO what info should I default to?\n\n    function displayPlayerStats() {\n        if (showStats) {\n            setShowStats(false);\n        } else {\n            setShowStats(true);\n        }\n    }\n\n    function displayTeamStats() {\n        if (showStats) {\n            setShowTeamStats(false);\n        } else {\n            setShowTeamStats(true);\n        }\n    }\n\n    return (\n        <div>\n            <Button variant=\"light\" size=\"lg\" onClick={displayPlayerStats}>\n                {'Player Stats'}\n            </Button>\n            <Button variant=\"light\" size=\"lg\" onClick={displayTeamStats}>\n                {'Team Stats'}\n            </Button>\n            <br />\n            <br />\n            {showStats && <PlayerStats />}\n            {showTeamStats && <TeamStats />}\n        </div>\n    );\n}\n\nexport default Stats;\n","import React from 'react';\nimport Stats from './components/stats';\nimport './app.css';\n\nfunction App() {\n    return (\n        <div id=\"app\">\n            <div id=\"header\">\n                <h1 style={{ fontSize: '4rem' }}>\n                    Stanningley Crown Green Bowling Club\n                </h1>\n            </div>\n            <Stats />\n            <link\n                rel=\"stylesheet\"\n                href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\"\n                integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\"\n                crossOrigin=\"anonymous\"\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}