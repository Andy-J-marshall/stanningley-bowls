{"version":3,"sources":["helpers/utils.js","components/individualTeamStats.js","components/combinedTeamStats.js","helpers/statsHelper.js","components/teamTabs.js","components/teamStats.js","components/players.js","components/playerStats.js","components/statsTableDisplay.js","components/teamRecords.js","components/playerRecords.js","components/brand-logo-tiny.png","components/brand-logo.png","components/home.js","App.js","index.js"],"names":["capitalizeText","stringArray","stringArrayAsString","forEach","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","IndividualTeamStats","props","day","stats","playerStats","awayWins","homeWins","cupWins","cupLosses","awayLosses","homeLosses","homeDraws","awayDraws","stanningleyAgg","stanningleyTotalPoints","opponentAgg","opponentTotalPoints","beaten","beatenBy","drawnWith","allPlayerStats","Object","keys","map","player","toLowerCase","games","wins","average","aggDiff","totalDraws","totalWins","totalLosses","totalGames","id","key","Math","floor","random","toFixed","CombinedTeamStats","combinedStats","statsArray","combinedAwayWins","combinedHomeWins","combinedCupWins","combinedAwayLosses","combinedHomeLosses","combinedCupLosses","combinedHomeDraws","combinedAwayDraws","combinedStanningleyAgg","combinedStanningleyTotalPoints","combinedOpponentAgg","combinedOpponentTotalPoints","combinedBeaten","combinedBeatenBy","combinedDrawnWith","push","combineTeamStats","TeamTabs","allComponent","mondayComponent","tuesdayComponent","thursdayComponent","saturdayComponent","Tabs","defaultActiveKey","className","Tab","eventKey","title","TeamStats","teamStats","bowlsStats","teamResults","playerResults","mondayStats","tuesdayStats","thursdayStats","saturdayStats","Players","playersStats","name","playerData","totalAgg","totalAggAgainst","totalPairsAgg","totalPairsAggAgainst","totalScore","totalScoreAgainst","winningPairsPartners","losingPairsPartners","beatenByTeam","beatenOpponents","beatenTeam","pairLosses","pairWins","pairsPartners","totalHomeAgg","totalHomeAggAgainst","totalAwayAgg","totalAwayAggAgainst","totalHomeScore","totalHomeScoreAgainst","totalAwayScore","totalAwayScoreAgainst","monday","tuesday","thursday","saturday","gamesPlayed","homeGamesPlayed","awayGamesPlayed","homeAverage","awayAverage","averageScore","averageScoreAgainst","homeAverageScore","homeAverageScoreAgainst","awayAverageScore","awayAverageScoreAgainst","pairsGames","mondayWins","mondayGames","mondayAvg","tuesdayWins","tuesdayGames","tuesdayAvg","thursdayWins","thursdayGames","thursdayAvg","saturdayWins","saturdayGames","saturdayAvg","daysPlayedCount","filter","pairsPartnersCount","calculatePairsPartnersCount","pairsPartnersCountWins","pairsPartnersCountLosses","allPairsPartners","uniquePartners","partner","indexOf","partnersReturnObj","reduce","partnerObj","timesPaired","includes","ListGroup","Item","length","PlayerStats","useState","searchedPlayerName","setSearchedPlayerName","value","setValue","playerNameArray","sort","p","showPlayerStats","playerName","Form","onSubmit","event","preventDefault","searchedName","target","trim","Group","placeholder","onChange","selected","options","concat","size","Button","variant","type","StatsTableDisplay","minGames","playerOrTeam","bestWinPerc","bestWinPercPlayerOrTeam","mostWins","mostWinsPlayer","mostGames","mostGamesPlayer","bestAverage","bestAveragePlayer","bestScore","bestScorePlayer","bestTeamPointsPerGame","bestTeamPointsPerGameTeam","fewestPointsConcededPerGame","fewestPointsConcededTeam","fewestPointsConcededPerGameTeam","bestTeamAggPerGame","bestTeamAggPerGameTeam","lowestAggConcededPerGame","lowestAggConcededPerGameTeam","Table","striped","bordered","hover","TeamRecords","bestWinPercentage","bestWinPercentageTeam","draws","winPercentage","gamesPerMatch","pointsPerGame","aggPerGame","pointsConcededPerGame","aggConcededPerGame","pop","PlayerRecords","players","mostMondayWinsPlayer","mostMondayWins","mostTuesdayWinsPlayer","mostTuesdayWins","mostThursdayWinsPlayer","mostThursdayWins","mostSaturdayWinsPlayer","mostSaturdayWins","bestMondayAveragePlayer","bestMondayAverage","bestMondayWinPerc","bestMondayWinPercPlayer","bestTuesdayAveragePlayer","bestTuesdayAverage","bestTuesdayWinPerc","bestTuesdayWinPercPlayer","bestThursdayAveragePlayer","bestThursdayAverage","bestThursdayWinPerc","bestThursdayWinPercPlayer","bestSaturdayAveragePlayer","bestSaturdayAverage","bestSaturdayWinPerc","bestSaturdayWinPercPlayer","bestWinPercPlayer","winPerc","score","mondayWinPerc","tuesdayWinPerc","thursdayWinPerc","saturdayWinPerc","playedMinGames","Home","setShowPlayerStats","showTeamStats","setShowTeamStats","showPlayerRecords","setShowPlayerRecords","showTeamRecords","setShowTeamRecords","loaded","setLoaded","displayPlayerStats","displayTeamStats","displayPlayerRecords","displayTeamRecords","useEffect","window","scrollTo","url","location","href","Navbar","collapseOnSelect","fixed","bg","expand","Container","fluid","Brand","alt","src","smallLogo","width","height","Toggle","Collapse","Nav","style","maxHeight","navbarScroll","Link","onSelect","logo","App","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fbfa6df.chunk.js","sourcesContent":["export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] =\n                array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        });\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString =\n            index === 0\n                ? capitalizedString\n                : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction IndividualTeamStats(props) {\n    const day = props.day;\n    const stats = props.stats;\n    const playerStats = props.playerStats;\n    const index = props.index;\n\n    const {\n        awayWins,\n        homeWins,\n        cupWins,\n        cupLosses,\n        awayLosses,\n        homeLosses,\n        homeDraws,\n        awayDraws,\n        stanningleyAgg,\n        stanningleyTotalPoints,\n        opponentAgg,\n        opponentTotalPoints,\n        beaten,\n        beatenBy,\n        drawnWith,\n    } = stats;\n\n    const allPlayerStats = Object.keys(playerStats).map((player) => {\n        const stats = playerStats[player][day.toLowerCase()];\n        const { games, wins, aggDiff } = stats;\n        const playerDayStats = {\n            player,\n            games,\n            wins,\n            average: aggDiff / games,\n        };\n        return playerDayStats;\n    });\n\n    const totalDraws = awayDraws + homeDraws;\n    const totalWins = awayWins + homeWins + cupWins;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return (\n        <div id={day + '-team-results'}>\n            <div id={day + '-team-win-losses'}>\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && (\n                    <p>\n                        ({homeWins} home, {awayWins} away, {cupWins} cup)\n                    </p>\n                )}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && (\n                    <p>\n                        ({homeLosses} home, {awayLosses} away, {cupLosses} cup)\n                    </p>\n                )}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && (\n                    <p>\n                        ({homeDraws} home, {awayDraws} away)\n                    </p>\n                )}\n            </div>\n            <div id={day + '-team-aggregates'}>\n                <p>Stanningley aggregate = {stanningleyAgg}</p>\n                <p>Opponents aggregate = {opponentAgg}</p>\n                <p>Stanningley team score = {stanningleyTotalPoints}</p>\n                <p>Opponents team score = {opponentTotalPoints}</p>\n            </div>\n            <div id={day + '-team-opponents'}>\n                {totalWins > 0 && (\n                    <p>Teams beaten = {capitalizeText(beaten)}</p>\n                )}\n                {totalLosses > 0 && (\n                    <p>Teams lost to = {capitalizeText(beatenBy)}</p>\n                )}\n                {totalDraws > 0 && (\n                    <p>Teams drawn with = {capitalizeText(drawnWith)}</p>\n                )}\n            </div>\n            {allPlayerStats.map((player) => {\n                const key = Math.floor(Math.random() * 100000 + index);\n                return (\n                    <div key={key}>\n                        {player.games > 0 && <h4>{capitalizeText([player.player])}</h4>}\n                        {player.games > 0 && <p>\n                            {player.games} games played, {player.wins} games\n                            won ({player.average.toFixed(2)} average)\n                        </p>}\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default IndividualTeamStats;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\nimport { combineTeamStats } from '../helpers/statsHelper';\n\nfunction CombinedTeamStats(props) {\n    const stats = props.stats;\n\n    const combinedStats = combineTeamStats(stats);\n    const {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupWins,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    } = combinedStats;\n\n    return (\n        <div id='combined-team-results'>\n            <div id='combined-team-win-losses'>\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && (\n                    <p>\n                        ({combinedHomeWins} home, {combinedAwayWins} away,{' '}\n                        {combinedCupWins} cup)\n                    </p>\n                )}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && (\n                    <p>\n                        ({combinedHomeLosses} home, {combinedAwayLosses} away,{' '}\n                        {combinedCupLosses} cup)\n                    </p>\n                )}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && (\n                    <p>\n                        ({combinedHomeDraws} home, {combinedAwayDraws} away)\n                    </p>\n                )}\n            </div>\n            <div id='combined-team-aggregates'>\n                <p>Stanningley aggregate = {combinedStanningleyAgg}</p>\n                <p>Opponents aggregate = {combinedOpponentAgg}</p>\n                <p>Stanningley team score = {combinedStanningleyTotalPoints}</p>\n                <p>Opponents team score = {combinedOpponentTotalPoints}</p>\n            </div>\n            <div id='combined-team-opponents'>\n                {totalWins > 0 && (\n                    <p>Teams beaten = {capitalizeText(combinedBeaten)}</p>\n                )}\n                {totalLosses > 0 && (\n                    <p>Teams lost to = {capitalizeText(combinedBeatenBy)}</p>\n                )}\n                {totalDraws > 0 && (\n                    <p>\n                        Teams drawn with = {capitalizeText(combinedDrawnWith)}\n                    </p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default CombinedTeamStats;\n","export function combineTeamStats(statsArray) {\n    let combinedAwayWins = 0;\n    let combinedHomeWins = 0;\n    let combinedCupWins = 0;\n    let combinedAwayLosses = 0;\n    let combinedHomeLosses = 0;\n    let combinedCupLosses = 0;\n    let combinedHomeDraws = 0;\n    let combinedAwayDraws = 0;\n    let combinedStanningleyAgg = 0;\n    let combinedStanningleyTotalPoints = 0;\n    let combinedOpponentAgg = 0;\n    let combinedOpponentTotalPoints = 0;\n    let combinedBeaten = [];\n    let combinedBeatenBy = [];\n    let combinedDrawnWith = [];\n\n    statsArray.forEach((stats) => {\n        const {\n            awayWins,\n            homeWins,\n            cupWins,\n            awayLosses,\n            homeLosses,\n            cupLosses,\n            homeDraws,\n            awayDraws,\n            stanningleyAgg,\n            stanningleyTotalPoints,\n            opponentAgg,\n            opponentTotalPoints,\n            beaten,\n            beatenBy,\n            drawnWith,\n        } = stats;\n        combinedAwayWins += awayWins;\n        combinedHomeWins += homeWins;\n        combinedAwayLosses += awayLosses;\n        combinedHomeLosses += homeLosses;\n        combinedHomeDraws += homeDraws;\n        combinedAwayDraws += awayDraws;\n        combinedCupWins += cupWins;\n        combinedCupLosses += cupLosses;\n        combinedStanningleyAgg += stanningleyAgg;\n        combinedStanningleyTotalPoints += stanningleyTotalPoints;\n        combinedOpponentAgg += opponentAgg;\n        combinedOpponentTotalPoints += opponentTotalPoints;\n        combinedBeaten.push(...beaten);\n        combinedBeatenBy.push(...beatenBy);\n        combinedDrawnWith.push(...drawnWith);\n    });\n\n    const totalDraws = combinedAwayDraws + combinedHomeDraws;\n    const totalWins = combinedAwayWins + combinedHomeWins + combinedCupWins;\n    const totalLosses =\n        combinedAwayLosses + combinedHomeLosses + combinedCupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedCupWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    };\n}\n","import React from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\n\nfunction TeamTabs(props) {\n    const id = props.id;\n    const allComponent = props.allComponent;\n    const mondayComponent = props.mondayComponent;\n    const tuesdayComponent = props.tuesdayComponent;\n    const thursdayComponent = props.thursdayComponent;\n    const saturdayComponent = props.saturdayComponent;\n\n    return (\n        <div>\n            <Tabs defaultActiveKey=\"Combined\" id={id} className=\"mb-3 tabs\">\n                <Tab eventKey=\"Combined\" title=\"All\">\n                    {allComponent}\n                </Tab>\n                <Tab eventKey=\"Monday\" title=\"Mon\">\n                    {mondayComponent}\n                </Tab>\n                <Tab eventKey=\"Tuesday\" title=\"Tues\">\n                    {tuesdayComponent}\n                </Tab>\n                <Tab eventKey=\"Thursday\" title=\"Thur\">\n                    {thursdayComponent}\n                </Tab>\n                <Tab eventKey=\"Saturday\" title=\"Sat\">\n                    {saturdayComponent}\n                </Tab>\n            </Tabs>\n        </div>\n    );\n}\n\nexport default TeamTabs;\n","import React from 'react';\nimport IndividualTeamStats from './individualTeamStats';\nimport CombinedTeamStats from './combinedTeamStats';\nimport TeamTabs from './teamTabs';\nimport bowlsStats from '../data/bowlsStats.json';\n\nfunction TeamStats() {\n    const teamStats = bowlsStats.teamResults;\n    const playerStats = bowlsStats.playerResults;\n    // TODO get the teamStats in a better way than using array\n    const mondayStats = teamStats[0];\n    const tuesdayStats = teamStats[1];\n    const thursdayStats = teamStats[2];\n    const saturdayStats = teamStats[3];\n\n    function allComponent() {\n        return <CombinedTeamStats stats={teamStats} />;\n    }\n\n    function mondayComponent() {\n        return (\n            <IndividualTeamStats\n                index={1}\n                day=\"Monday\"\n                stats={mondayStats}\n                playerStats={playerStats}\n            />\n        );\n    }\n\n    function tuesdayComponent() {\n        return (\n            <IndividualTeamStats\n                index={2}\n                day=\"Tuesday\"\n                stats={tuesdayStats}\n                playerStats={playerStats}\n            />\n        );\n    }\n\n    function thursdayComponent() {\n        return (\n            <IndividualTeamStats\n                index={3}\n                day=\"Thursday\"\n                stats={thursdayStats}\n                playerStats={playerStats}\n            />\n        );\n    }\n\n    function saturdayComponent() {\n        return (\n            <IndividualTeamStats\n                index={4}\n                day=\"Saturday\"\n                stats={saturdayStats}\n                playerStats={playerStats}\n            />\n        );\n    }\n\n    return (\n        <div>\n            <TeamTabs\n                id=\"team-stat\"\n                allComponent={allComponent()}\n                mondayComponent={mondayComponent()}\n                tuesdayComponent={tuesdayComponent()}\n                thursdayComponent={thursdayComponent()}\n                saturdayComponent={saturdayComponent()}\n            />\n        </div>\n    );\n}\n\nexport default TeamStats;\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction Players(props) {\n    const index = props.index;\n    const player = props.player;\n    const playersStats = props.playersStats;\n    const name = props.name;\n\n    const playerData = playersStats[player];\n    let {\n        totalAgg,\n        totalAggAgainst,\n        totalPairsAgg,\n        totalPairsAggAgainst,\n        totalScore,\n        totalScoreAgainst,\n        awayLosses,\n        homeLosses,\n        cupLosses,\n        homeWins,\n        awayWins,\n        cupWins,\n        winningPairsPartners,\n        losingPairsPartners,\n        beatenBy,\n        beatenByTeam,\n        beatenOpponents,\n        beatenTeam,\n        pairLosses,\n        pairWins,\n        pairsPartners,\n        totalHomeAgg,\n        totalHomeAggAgainst,\n        totalAwayAgg,\n        totalAwayAggAgainst,\n        totalHomeScore,\n        totalHomeScoreAgainst,\n        totalAwayScore,\n        totalAwayScoreAgainst,\n        monday,\n        tuesday,\n        thursday,\n        saturday,\n    } = playerData;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalWins = awayWins + homeWins + cupWins;\n    const gamesPlayed = totalLosses + totalWins;\n    const homeGamesPlayed = homeWins + homeLosses;\n    const awayGamesPlayed = awayWins + awayLosses;\n    const average = (totalAgg - totalAggAgainst) / gamesPlayed;\n    const homeAverage = (totalHomeAgg - totalHomeAggAgainst) / homeGamesPlayed;\n    const awayAverage = (totalAwayAgg - totalAwayAggAgainst) / awayGamesPlayed;\n    const averageScore = totalScore / gamesPlayed;\n    const averageScoreAgainst = totalScoreAgainst / gamesPlayed;\n    const homeAverageScore = totalHomeScore / homeGamesPlayed;\n    const homeAverageScoreAgainst = totalHomeScoreAgainst / homeGamesPlayed;\n    const awayAverageScore = totalAwayScore / awayGamesPlayed;\n    const awayAverageScoreAgainst = totalAwayScoreAgainst / awayGamesPlayed;\n    beatenBy = capitalizeText(beatenBy);\n    beatenOpponents = capitalizeText(beatenOpponents);\n    beatenByTeam = capitalizeText(beatenByTeam);\n    beatenTeam = capitalizeText(beatenTeam);\n    const pairsGames = pairLosses + pairWins;    \n    const mondayWins = monday.wins;\n    const mondayGames = monday.games;\n    const mondayAvg = monday.aggDiff / mondayGames;\n    const tuesdayWins = tuesday.wins;\n    const tuesdayGames = tuesday.games;\n    const tuesdayAvg = tuesday.aggDiff / tuesdayGames;\n    const thursdayWins = thursday.wins;\n    const thursdayGames = thursday.games;\n    const thursdayAvg = thursday.aggDiff / thursdayGames;\n    const saturdayWins = saturday.wins;\n    const saturdayGames = saturday.games;\n    const saturdayAvg = saturday.aggDiff / saturdayGames;\n    let daysPlayedCount = [\n        { day: 'Monday', gamesPlayed: mondayGames },\n        { day: 'Tuesday', gamesPlayed: tuesdayGames },\n        { day: 'Thursday', gamesPlayed: thursdayGames },\n        { day: 'Saturday', gamesPlayed: saturdayGames },\n    ]\n    daysPlayedCount = daysPlayedCount.filter((day) => day.gamesPlayed > 0);\n\n    const pairsPartnersCount = calculatePairsPartnersCount(pairsPartners);\n    const pairsPartnersCountWins =\n        calculatePairsPartnersCount(winningPairsPartners);\n    const pairsPartnersCountLosses =\n        calculatePairsPartnersCount(losingPairsPartners);\n\n    function calculatePairsPartnersCount(allPairsPartners) {\n        const uniquePartners = allPairsPartners.filter((partner, index) => {\n            return allPairsPartners.indexOf(partner) === index;\n        });\n        const partnersReturnObj = uniquePartners.reduce(\n            (partnerObj, player) => {\n                partnerObj[player] = { timesPaired: 0 };\n                return partnerObj;\n            },\n            {}\n        );\n\n        allPairsPartners.forEach((partner) => {\n            if (uniquePartners.includes(partner)) {\n                partnersReturnObj[partner].timesPaired += 1;\n            }\n        });\n        return partnersReturnObj;\n    }\n\n    // TODO handle plurals\n    // TODO still want to use listgroups?\n    return (\n        <div>\n            <ListGroup.Item key={index}>\n                <div>\n                    <h4>{capitalizeText([name])}</h4>\n                    {gamesPlayed === 0 && <p>No games played</p>}\n                    {gamesPlayed > 0 && (\n                        <div>\n                            <h5>Games</h5>\n                            <p>{gamesPlayed} games played in total</p>\n                            {daysPlayedCount.map((day) => {\n                                const key = Math.floor(\n                                    Math.random() * 100000 + index\n                                );\n                                return (\n                                    <p key={key}>\n                                        {day.gamesPlayed} games played on{' '}\n                                        {day.day}\n                                    </p>\n                                );\n                            })}\n                            {pairsGames > 0 && (\n                                <p>{pairsGames} pairs games played</p>\n                            )}\n\n                            <h5>Results</h5>\n                            {totalWins > 0 && (\n                                <div>\n                                    <p>\n                                        {totalWins} wins ({homeWins} home,{' '}\n                                        {awayWins} away, {cupWins} cup)\n                                    </p>\n                                    {mondayGames > 0 && <p>{mondayWins} Monday wins</p>}\n                                    {tuesdayGames > 0 && <p>{tuesdayWins} Tuesday wins</p>}\n                                    {thursdayGames > 0 && <p>{thursdayWins} Thursday wins</p>}\n                                    {saturdayGames > 0 && <p>{saturdayWins} Saturday wins</p>}\n                                </div>\n                            )}\n                            {totalLosses > 0 && (\n                                <p>\n                                    {totalLosses} losses ({homeLosses} home,{' '}\n                                    {awayLosses} away, {cupLosses} cup)\n                                </p>\n                            )}\n                            <p>\n                                {((totalWins / gamesPlayed) * 100).toFixed(0)}%\n                                win percentage\n                            </p>\n\n                            {pairsGames > 0 && (\n                                <div>\n                                    <h5>Pairs</h5>\n                                    <p>{pairsGames} pairs games played</p>\n                                    <p>{pairWins} pairs wins</p>\n                                    <p>{pairLosses} pairs losses</p>\n                                    {pairsPartners.length > 0 &&\n                                        Object.keys(pairsPartnersCount).map(\n                                            (partner) => {\n                                                const key = Math.floor(\n                                                    Math.random() * 100000 +\n                                                        index\n                                                );\n                                                return (\n                                                    <p key={key}>\n                                                        {\n                                                            pairsPartnersCount[\n                                                                partner\n                                                            ].timesPaired\n                                                        }{' '}\n                                                        games played with{' '}\n                                                        {partner}\n                                                    </p>\n                                                );\n                                            }\n                                        )}\n                                    {pairWins > 0 &&\n                                        Object.keys(pairsPartnersCountWins).map(\n                                            (partner) => {\n                                                const key = Math.floor(\n                                                    Math.random() * 100000 +\n                                                        index\n                                                );\n                                                return (\n                                                    <p key={key}>\n                                                        {\n                                                            pairsPartnersCountWins[\n                                                                partner\n                                                            ].timesPaired\n                                                        }{' '}\n                                                        games won with {partner}\n                                                    </p>\n                                                );\n                                            }\n                                        )}\n                                    {pairLosses > 0 &&\n                                        Object.keys(\n                                            pairsPartnersCountLosses\n                                        ).map((partner) => {\n                                            const key = Math.floor(\n                                                Math.random() * 100000 + index\n                                            );\n                                            return (\n                                                <p key={key}>\n                                                    {\n                                                        pairsPartnersCountLosses[\n                                                            partner\n                                                        ].timesPaired\n                                                    }{' '}\n                                                    games lost with {partner}\n                                                </p>\n                                            );\n                                        })}\n                                </div>\n                            )}\n\n                            <h5>Opponents</h5>\n                            {beatenOpponents.length > 0 && (\n                                <p>Beaten opponents = {beatenOpponents}</p>\n                            )}\n                            {beatenBy.length > 0 && (\n                                <p>Defeated by = {beatenBy}</p>\n                            )}\n                            {beatenTeam.length > 0 && (\n                                <p>Beaten team = {beatenTeam}</p>\n                            )}\n                            {beatenByTeam.length > 0 && (\n                                <p>Teams lost to = {beatenByTeam}</p>\n                            )}\n\n                            <div>\n                                <h5>Averages</h5>\n                                {average >= -21 && (\n                                    <div>\n                                        <p>Average = {average.toFixed(2)}</p>\n                                        {homeAverage > -22 && (\n                                            <p>\n                                                Home average =\n                                                {homeAverage.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {awayAverage > -22 && (\n                                            <p>\n                                                Away average =\n                                                {awayAverage.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {mondayGames > 0 && (\n                                            <p>\n                                                Monday average =\n                                                {mondayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {tuesdayGames > 0 && (\n                                            <p>\n                                                Tuesday average =\n                                                {tuesdayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {thursdayGames > 0 && (\n                                            <p>\n                                                Thursday average =\n                                                {thursdayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {saturdayGames > 0 && (\n                                            <p>\n                                                Saturday average =\n                                                {saturdayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                    </div>\n                                )}\n                                {averageScore >= 0 && (\n                                    <div>\n                                        <p>\n                                            Average score ={' '}\n                                            {averageScore.toFixed(2)} / 5\n                                        </p>\n                                        <p>\n                                            Average opponents score ={' '}\n                                            {averageScoreAgainst.toFixed(2)} / 5\n                                        </p>\n                                        {homeAverageScore >= 0 && (\n                                            <div>\n                                                <p>\n                                                    Average home score ={' '}\n                                                    {homeAverageScore.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                                <p>\n                                                    Average home opponents score\n                                                    ={' '}\n                                                    {homeAverageScoreAgainst.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                            </div>\n                                        )}\n                                        {awayAverageScore >= 0 && (\n                                            <div>\n                                                <p>\n                                                    Average away score ={' '}\n                                                    {awayAverageScore.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                                <p>\n                                                    Average away opponents score\n                                                    ={' '}\n                                                    {awayAverageScoreAgainst.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                            </div>\n                                        )}\n                                    </div>\n                                )}\n\n                                <h5>Aggregates</h5>\n                                <p>\n                                    <b>Points</b>\n                                </p>\n                                <p>\n                                    Total aggregate scored = {totalAgg} /{' '}\n                                    {gamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total aggregate conceded = {totalAggAgainst}{' '}\n                                    / {gamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total home aggregate scored = {totalHomeAgg}{' '}\n                                    / {homeGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total home aggregate conceded ={' '}\n                                    {totalHomeAggAgainst} /{' '}\n                                    {homeGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total away aggregate scored = {totalAwayAgg}{' '}\n                                    / {awayGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total away aggregate conceded ={' '}\n                                    {totalAwayAggAgainst} /{' '}\n                                    {awayGamesPlayed * 21}\n                                </p>\n                                {pairsGames > 0 && (\n                                    <p>\n                                        Total pairs aggregate scored ={' '}\n                                        {totalPairsAgg} / {pairsGames * 21}\n                                    </p>\n                                )}\n                                {pairsGames > 0 && (\n                                    <p>\n                                        Total pairs aggregate conceded =\n                                        {totalPairsAggAgainst} /\n                                        {pairsGames * 21}\n                                    </p>\n                                )}\n\n                                <p>\n                                    <b>Team Points</b>\n                                </p>\n                                <p>\n                                    Total points scored = {totalScore} /{' '}\n                                    {gamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total points conceded = {totalScoreAgainst}{' '}\n                                    / {gamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total home points scored = {totalHomeScore}{' '}\n                                    / {homeGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total home points conceded ={' '}\n                                    {totalHomeScoreAgainst} /{' '}\n                                    {homeGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total away points scored = {totalAwayScore}/{' '}\n                                    {awayGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total away points conceded ={' '}\n                                    {totalAwayScoreAgainst} /{' '}\n                                    {awayGamesPlayed * 5}\n                                </p>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </ListGroup.Item>\n        </div>\n    );\n}\n\nexport default Players;\n","import React, { useState, Fragment } from 'react';\nimport Player from './players';\nimport { ListGroup, Form, Button } from 'react-bootstrap';\nimport bowlsStats from '../data/bowlsStats.json';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nfunction PlayerStats() {\n    const [searchedPlayerName, setSearchedPlayerName] = useState('');\n    const [value, setValue] = useState(['']);\n\n    const playersStats = bowlsStats.playerResults;\n    const keys = Object.keys(playersStats);\n    const playerNameArray = keys.sort().map((p) => p.toUpperCase());\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setValue(['']);\n        const searchedName = event.target[0].value.trim();\n        setSearchedPlayerName(searchedName.toLowerCase());\n    };\n\n    const handleChange = (selected) => {\n        setValue(selected);\n    };\n\n    function showPlayerStats(index, player, playerName) {\n        return (\n            <Player\n                key={index}\n                index={index}\n                player={player}\n                name={playerName}\n                playersStats={playersStats}\n            ></Player>\n        );\n    }\n\n    return (\n        <div id='player-stat'>\n            <h1>Player Stats</h1>\n            <Form id='player-search-form' className='center' onSubmit={handleSubmit}>\n                <Fragment>\n                    <Form.Group className='mb-3'>\n                        <Typeahead\n                            id='player-search'\n                            placeholder='Search for player'\n                            onChange={handleChange}\n                            options={['SHOW ALL'].concat(playerNameArray)}\n                            selected={value}\n                            size='lg'\n                        />\n                    </Form.Group>\n                </Fragment>\n                <Button variant='light' type='submit'>\n                    Search\n                </Button>\n            </Form>\n            <br />\n\n            {/* Shows all players */}\n            {(!searchedPlayerName ||\n                searchedPlayerName.toLowerCase() === 'show all') && (\n                <ListGroup>\n                    {keys.map((p, index) => {\n                        const playerName = keys[index];\n                        {\n                            return showPlayerStats(index, p, playerName);\n                        }\n                    })}\n                </ListGroup>\n            )}\n\n            {/* Only shows searched for player */}\n            {searchedPlayerName && (\n                <ListGroup>\n                    {keys.map((p, index) => {\n                        const playerName = keys[index];\n                        if (\n                            playerName.toLowerCase() ===\n                            searchedPlayerName.toLowerCase()\n                        ) {\n                            {\n                                return showPlayerStats(index, p, playerName);\n                            }\n                        }\n                    })}\n                </ListGroup>\n            )}\n        </div>\n    );\n}\n\nexport default PlayerStats;\n","import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction StatsTableDisplay(props) {\n    const minGames = props.minGames;\n    const playerOrTeam = props.playerOrTeam;\n    let bestWinPerc = props.bestWinPerc;\n    const bestWinPercPlayerOrTeam = props.bestWinPercPlayerOrTeam;\n    // Player stats\n    const mostWins = props.mostWins;\n    const mostWinsPlayer = props.mostWinsPlayer;\n    const mostGames = props.mostGames;\n    const mostGamesPlayer = props.mostGamesPlayer;\n    const bestAverage = props.bestAverage;\n    const bestAveragePlayer = props.bestAveragePlayer;\n    const bestScore = props.bestScore;\n    const bestScorePlayer = props.bestScorePlayer;\n    // Team stats\n    const bestTeamPointsPerGame = props.bestTeamPointsPerGame;\n    const bestTeamPointsPerGameTeam = props.bestTeamPointsPerGameTeam;\n    const fewestPointsConcededPerGame = props.fewestPointsConcededPerGame;\n    const fewestPointsConcededTeam = props.fewestPointsConcededPerGameTeam;\n    const bestTeamAggPerGame = props.bestTeamAggPerGame;\n    const bestTeamAggPerGameTeam = props.bestTeamAggPerGameTeam;\n    const lowestAggConcededPerGame = props.lowestAggConcededPerGame;\n    const lowestAggConcededPerGameTeam = props.lowestAggConcededPerGameTeam;\n\n    if (bestWinPerc) {\n        bestWinPerc =\n            bestWinPerc.toFixed(1) % 10\n                ? bestWinPerc.toFixed(1)\n                : bestWinPerc.toFixed(0);\n    }\n    return (\n        <div>\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Record</th>\n                        <th>Value</th>\n                        <th>{playerOrTeam} (Games Played)</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {mostGames && mostGamesPlayer && mostGames > 0 && (\n                        <tr>\n                            <td>Most Games</td>\n                            <td>{mostGames}</td>\n                            <td>{capitalizeText(mostGamesPlayer)}</td>\n                        </tr>\n                    )}\n                    {mostWins && mostWinsPlayer && mostWins > 0 && (\n                        <tr>\n                            <td>Most Wins</td>\n                            <td>{mostWins}</td>\n                            <td>{capitalizeText(mostWinsPlayer)}</td>\n                        </tr>\n                    )}\n                    {bestWinPerc && bestWinPercPlayerOrTeam && bestWinPerc > 0 && (\n                        <tr>\n                            <td>Win percentage</td>\n                            <td>{bestWinPerc}%</td>\n                            <td>{capitalizeText(bestWinPercPlayerOrTeam)}</td>\n                        </tr>\n                    )}\n                    {bestAverage && bestAveragePlayer && bestAverage >= -21 && (\n                        <tr>\n                            <td>Average</td>\n                            <td>{bestAverage.toFixed(2)}</td>\n                            <td>{capitalizeText(bestAveragePlayer)}</td>\n                        </tr>\n                    )}\n                    {bestScore && bestScorePlayer && bestScore > 0 && (\n                        <tr>\n                            <td>Score per game</td>\n                            <td>{bestScore.toFixed(2)}</td>\n                            <td>{capitalizeText(bestScorePlayer)}</td>\n                        </tr>\n                    )}\n                    {bestTeamPointsPerGameTeam &&\n                        bestTeamPointsPerGame &&\n                        bestTeamPointsPerGame > 0 && (\n                            <tr>\n                                <td>Score per game</td>\n                                <td>{bestTeamPointsPerGame.toFixed(2)}</td>\n                                <td>\n                                    {capitalizeText(bestTeamPointsPerGameTeam)}\n                                </td>\n                            </tr>\n                        )}\n                    {fewestPointsConcededTeam &&\n                        fewestPointsConcededPerGame &&\n                        fewestPointsConcededPerGame > 0 && (\n                            <tr>\n                                <td>Opponent score per game</td>\n                                <td>\n                                    {fewestPointsConcededPerGame.toFixed(2)}\n                                </td>\n                                <td>\n                                    {capitalizeText(fewestPointsConcededTeam)}\n                                </td>\n                            </tr>\n                        )}\n                    {bestTeamAggPerGameTeam &&\n                        bestTeamAggPerGame &&\n                        bestTeamAggPerGame > 0 && (\n                            <tr>\n                                <td>Points per game</td>\n                                <td>{bestTeamAggPerGame.toFixed(2)}</td>\n                                <td>\n                                    {capitalizeText(bestTeamAggPerGameTeam)}\n                                </td>\n                            </tr>\n                        )}\n                    {lowestAggConcededPerGame &&\n                        lowestAggConcededPerGameTeam &&\n                        lowestAggConcededPerGame > 0 && (\n                            <tr>\n                                <td>Opponent points per game</td>\n                                <td>{lowestAggConcededPerGame.toFixed(2)}</td>\n                                <td>\n                                    {capitalizeText(\n                                        lowestAggConcededPerGameTeam\n                                    )}\n                                </td>\n                            </tr>\n                        )}\n                </tbody>\n            </Table>\n            <p>* minimum of {minGames} games</p>\n        </div>\n    );\n}\n\nexport default StatsTableDisplay;\n","import React from 'react';\nimport StatsTableDisplay from './statsTableDisplay';\n\nfunction TeamRecords(props) {\n    const statsArray = props.stats;\n\n    let bestWinPercentage = -1;\n    let bestWinPercentageTeam = [];\n    let bestTeamPointsPerGame = -1;\n    let bestTeamPointsPerGameTeam = [];\n    let bestTeamAggPerGame = -1;\n    let bestTeamAggPerGameTeam = [];\n    let fewestPointsConcededPerGame = 100;\n    let fewestPointsConcededPerGameTeam = [];\n    let lowestAggConcededPerGame = 1000;\n    let lowestAggConcededPerGameTeam = [];\n\n    statsArray.forEach((stats) => {\n        const {\n            day,\n            awayWins,\n            homeWins,\n            cupWins,\n            awayLosses,\n            homeLosses,\n            cupLosses,\n            homeDraws,\n            awayDraws,\n            stanningleyAgg,\n            stanningleyTotalPoints,\n            opponentAgg,\n            opponentTotalPoints,\n        } = stats;\n        const wins = awayWins + homeWins + cupWins;\n        const losses = awayLosses + homeLosses + cupLosses;\n        const draws = awayDraws + homeDraws;\n        const drawPoints = draws > 0 ? draws * 0.5 : 0;\n        const totalGames = wins + losses + homeDraws + awayDraws;\n        const winPercentage = ((wins + drawPoints) / totalGames) * 100;\n\n        const gamesPerMatch = day === 'Monday' ? 6 : 8;\n        const pointsPerGame =\n            stanningleyTotalPoints /\n            gamesPerMatch /\n            (totalGames - cupLosses - cupWins); // cup games are decided on pure aggregate\n        const aggPerGame = stanningleyAgg / gamesPerMatch / totalGames;\n        const pointsConcededPerGame =\n            opponentTotalPoints /\n            gamesPerMatch /\n            (totalGames - cupLosses - cupWins);\n        const aggConcededPerGame = opponentAgg / gamesPerMatch / totalGames;\n\n        if (aggPerGame >= bestTeamAggPerGame && totalGames >= 2) {\n            if (aggPerGame !== bestTeamAggPerGame) {\n                bestTeamAggPerGameTeam.pop();\n            }\n            bestTeamAggPerGameTeam.push(`${day} (${totalGames})`);\n            bestTeamAggPerGame = aggPerGame;\n        }\n        if (pointsPerGame >= bestTeamPointsPerGame && totalGames >= 2) {\n            if (pointsPerGame !== bestTeamPointsPerGame) {\n                bestTeamPointsPerGameTeam.pop();\n            }\n            bestTeamPointsPerGameTeam.push(`${day} (${totalGames})`);\n            bestTeamPointsPerGame = pointsPerGame;\n        }\n        if (\n            pointsConcededPerGame <= fewestPointsConcededPerGame &&\n            totalGames >= 2\n        ) {\n            if (pointsConcededPerGame !== fewestPointsConcededPerGame) {\n                fewestPointsConcededPerGameTeam.pop();\n            }\n            fewestPointsConcededPerGameTeam.push(`${day} (${totalGames})`);\n            fewestPointsConcededPerGame = pointsConcededPerGame;\n        }\n        if (aggConcededPerGame <= lowestAggConcededPerGame && totalGames >= 2) {\n            if (aggConcededPerGame !== lowestAggConcededPerGame) {\n                lowestAggConcededPerGameTeam.pop();\n            }\n            lowestAggConcededPerGameTeam.push(`${day} (${totalGames})`);\n            lowestAggConcededPerGame = aggConcededPerGame;\n        }\n        if (winPercentage >= bestWinPercentage && totalGames >= 2) {\n            if (winPercentage !== bestWinPercentage) {\n                bestWinPercentageTeam.pop();\n            }\n            bestWinPercentageTeam.push(`${day} (${totalGames})`);\n            bestWinPercentage = winPercentage;\n        }\n    });\n\n    return (\n        <div id=\"team-record\">\n            <StatsTableDisplay\n                minGames={2}\n                playerOrTeam={'Team'}\n                bestWinPerc={bestWinPercentage}\n                bestWinPercPlayerOrTeam={bestWinPercentageTeam}\n                bestTeamPointsPerGame={bestTeamPointsPerGame}\n                bestTeamPointsPerGameTeam={bestTeamPointsPerGameTeam}\n                fewestPointsConcededPerGame={fewestPointsConcededPerGame}\n                fewestPointsConcededPerGameTeam={\n                    fewestPointsConcededPerGameTeam\n                }\n                bestTeamAggPerGame={bestTeamAggPerGame}\n                bestTeamAggPerGameTeam={bestTeamAggPerGameTeam}\n                lowestAggConcededPerGame={lowestAggConcededPerGame}\n                lowestAggConcededPerGameTeam={lowestAggConcededPerGameTeam}\n            />\n        </div>\n    );\n}\n\nexport default TeamRecords;\n","import React from 'react';\nimport TeamTabs from './teamTabs';\nimport StatsTableDisplay from './statsTableDisplay';\n\nfunction PlayerRecords(props) {\n    const playersStats = props.playersStats;\n    const players = Object.keys(playersStats);\n\n    let mostMondayWinsPlayer = [];\n    let mostMondayWins = 0;\n    let mostTuesdayWinsPlayer = [];\n    let mostTuesdayWins = 0;\n    let mostThursdayWinsPlayer = [];\n    let mostThursdayWins = 0;\n    let mostSaturdayWinsPlayer = [];\n    let mostSaturdayWins = 0;\n    let bestMondayAveragePlayer = [];\n    let bestMondayAverage = -21;\n    let bestMondayWinPerc = 0;\n    let bestMondayWinPercPlayer = 0;\n    let bestTuesdayAveragePlayer = [];\n    let bestTuesdayAverage = -21;\n    let bestTuesdayWinPerc = 0;\n    let bestTuesdayWinPercPlayer = 0;\n    let bestThursdayAveragePlayer = [];\n    let bestThursdayAverage = -21;\n    let bestThursdayWinPerc = 0;\n    let bestThursdayWinPercPlayer = 0;\n    let bestSaturdayAveragePlayer = [];\n    let bestSaturdayAverage = -21;\n    let bestSaturdayWinPerc = 0;\n    let bestSaturdayWinPercPlayer = 0;\n    let mostGamesPlayer = [];\n    let mostGames = 0;\n    let mostWinsPlayer = [];\n    let mostWins = 0;\n    let bestWinPercPlayer = [];\n    let bestWinPerc = 0;\n    let bestAveragePlayer = [];\n    let bestAverage = -21;\n    let bestScorePlayer = [];\n    let bestScore = 0;\n\n    players.forEach((player) => {\n        const p = playersStats[player];\n        const totalWins = p.awayWins + p.homeWins + p.cupWins;\n        const totalLosses = p.awayLosses + p.homeLosses + p.cupLosses;\n        const totalGames = totalWins + totalLosses;\n        const winPerc = (totalWins / totalGames) * 100;\n        const average = (p.totalAgg - p.totalAggAgainst) / totalGames;\n        const score = p.totalScore / totalGames;\n\n        const { monday, tuesday, thursday, saturday } = p;\n        const mondayWins = monday.wins;\n        const mondayGames = monday.games;\n        const mondayAvg = monday.aggDiff / mondayGames;\n        const mondayWinPerc = (mondayWins / mondayGames) * 100;\n        const tuesdayWins = tuesday.wins;\n        const tuesdayGames = tuesday.games;\n        const tuesdayAvg = tuesday.aggDiff / tuesdayGames;\n        const tuesdayWinPerc = (tuesdayWins / tuesdayGames) * 100;\n        const thursdayWins = thursday.wins;\n        const thursdayGames = thursday.games;\n        const thursdayAvg = thursday.aggDiff / thursdayGames;\n        const thursdayWinPerc = (thursdayWins / thursdayGames) * 100;\n        const saturdayWins = saturday.wins;\n        const saturdayGames = saturday.games;\n        const saturdayAvg = saturday.aggDiff / saturdayGames;\n        const saturdayWinPerc = (saturdayWins / saturdayGames) * 100;\n\n        const playedMinGames = totalGames >= 10 ? true : false;\n\n        if (mondayAvg >= bestMondayAverage && mondayGames >= 6) {\n            if (mondayAvg > bestMondayAverage) {\n                bestMondayAveragePlayer = [];\n                bestMondayAverage = mondayAvg;\n            }\n            bestMondayAveragePlayer.push(`${player}(${mondayGames})`);\n        }\n        if (tuesdayAvg >= bestTuesdayAverage && tuesdayGames >= 6) {\n            if (tuesdayAvg > bestTuesdayAverage) {\n                bestTuesdayAveragePlayer = [];\n                bestTuesdayAverage = tuesdayAvg;\n            }\n            bestTuesdayAveragePlayer.push(`${player}(${tuesdayGames})`);\n        }\n        if (thursdayAvg >= bestThursdayAverage && thursdayGames >= 6) {\n            if (thursdayAvg > bestThursdayAverage) {\n                bestThursdayAveragePlayer = [];\n                bestThursdayAverage = thursdayAvg;\n            }\n            bestThursdayAveragePlayer.push(`${player}(${thursdayGames})`);\n        }\n        if (saturdayAvg >= bestSaturdayAverage && saturdayGames >= 6) {\n            if (saturdayAvg > bestSaturdayAverage) {\n                bestSaturdayAveragePlayer = [];\n                bestSaturdayAverage = saturdayAvg;\n            }\n            bestSaturdayAveragePlayer.push(`${player}(${saturdayGames})`);\n        }\n        if (mondayWins >= mostMondayWins) {\n            if (mondayWins > mostMondayWins) {\n                mostMondayWinsPlayer = [];\n                mostMondayWins = mondayWins;\n            }\n            mostMondayWinsPlayer.push(`${player}(${mondayGames})`);\n        }\n        if (tuesdayWins >= mostTuesdayWins) {\n            if (tuesdayWins > mostTuesdayWins) {\n                mostTuesdayWinsPlayer = [];\n                mostTuesdayWins = tuesdayWins;\n            }\n            mostTuesdayWinsPlayer.push(`${player}(${tuesdayGames})`);\n        }\n        if (thursdayWins >= mostThursdayWins) {\n            if (thursdayWins > mostThursdayWins) {\n                mostThursdayWinsPlayer = [];\n                mostThursdayWins = thursdayWins;\n            }\n            mostThursdayWinsPlayer.push(`${player}(${thursdayGames})`);\n        }\n        if (saturdayWins >= mostSaturdayWins) {\n            if (saturdayWins > mostSaturdayWins) {\n                mostSaturdayWinsPlayer = [];\n                mostSaturdayWins = saturdayWins;\n            }\n            mostSaturdayWinsPlayer.push(`${player}(${saturdayGames})`);\n        }\n        if (mondayWinPerc >= bestMondayWinPerc && mondayGames >= 6) {\n            if (mondayWinPerc > bestMondayWinPerc) {\n                bestMondayWinPercPlayer = [];\n                bestMondayWinPerc = mondayWinPerc;\n            }\n            bestMondayWinPercPlayer.push(`${player}(${mondayGames})`);\n        }\n        if (tuesdayWinPerc >= bestTuesdayWinPerc && tuesdayGames >= 6) {\n            if (tuesdayWinPerc > bestTuesdayWinPerc) {\n                bestTuesdayWinPercPlayer = [];\n                bestTuesdayWinPerc = tuesdayWinPerc;\n            }\n            bestTuesdayWinPercPlayer.push(`${player}(${tuesdayGames})`);\n        }\n        if (thursdayWinPerc >= bestThursdayWinPerc && thursdayGames >= 6) {\n            if (thursdayWinPerc > bestThursdayWinPerc) {\n                bestThursdayWinPercPlayer = [];\n                bestThursdayWinPerc = thursdayWinPerc;\n            }\n            bestThursdayWinPercPlayer.push(`${player}(${thursdayGames})`);\n        }\n        if (saturdayWinPerc >= bestSaturdayWinPerc && saturdayGames >= 6) {\n            if (saturdayWinPerc > bestSaturdayWinPerc) {\n                bestSaturdayWinPercPlayer = [];\n                bestSaturdayWinPerc = saturdayWinPerc;\n            }\n            bestSaturdayWinPercPlayer.push(`${player}(${saturdayGames})`);\n        }\n        if (totalGames >= mostGames) {\n            if (totalGames > mostGames) {\n                mostGamesPlayer = [];\n                mostGames = totalGames;\n            }\n            mostGamesPlayer.push(player);\n        }\n        if (totalWins >= mostWins) {\n            if (totalWins > mostWins) {\n                mostWinsPlayer = [];\n                mostWins = totalWins;\n            }\n            mostWinsPlayer.push(`${player}(${totalGames})`);\n        }\n        if (winPerc >= bestWinPerc && playedMinGames) {\n            if (winPerc > bestWinPerc) {\n                bestWinPercPlayer = [];\n                bestWinPerc = winPerc;\n            }\n            bestWinPercPlayer.push(`${player}(${totalGames})`);\n        }\n        if (average >= bestAverage && playedMinGames) {\n            if (average > bestAverage) {\n                bestAveragePlayer = [];\n                bestAverage = average;\n            }\n            bestAveragePlayer.push(`${player}(${totalGames})`);\n        }\n        if (score >= bestScore && playedMinGames) {\n            if (score > bestScore) {\n                bestScorePlayer = [];\n                bestScore = score;\n            }\n            bestScorePlayer.push(`${player}(${totalGames})`);\n        }\n    });\n\n    function allComponent() {\n        return (\n            <div>\n                <StatsTableDisplay\n                    minGames={10}\n                    playerOrTeam={'Player'}\n                    mostGames={mostGames}\n                    mostGamesPlayer={mostGamesPlayer}\n                    mostWins={mostWins}\n                    mostWinsPlayer={mostWinsPlayer}\n                    bestWinPerc={bestWinPerc}\n                    bestWinPercPlayerOrTeam={bestWinPercPlayer}\n                    bestAverage={bestAverage}\n                    bestAveragePlayer={bestAveragePlayer}\n                    bestScore={bestScore}\n                    bestScorePlayer={bestScorePlayer}\n                />\n            </div>\n        );\n    }\n\n    // TODO create a component for this.\n    function mondayComponent() {\n        return (\n            <div>\n                <StatsTableDisplay\n                    minGames={6}\n                    playerOrTeam={'Player'}\n                    mostWins={mostMondayWins}\n                    mostWinsPlayer={mostMondayWinsPlayer}\n                    bestWinPerc={bestMondayWinPerc}\n                    bestWinPercPlayerOrTeam={bestMondayWinPercPlayer}\n                    bestAverage={bestMondayAverage}\n                    bestAveragePlayer={bestMondayAveragePlayer}\n                />\n            </div>\n        );\n    }\n\n    function tuesdayComponent() {\n        return (\n            <div>\n                <StatsTableDisplay\n                    minGames={6}\n                    playerOrTeam={'Player'}\n                    mostWins={mostTuesdayWins}\n                    mostWinsPlayer={mostTuesdayWinsPlayer}\n                    bestWinPerc={bestTuesdayWinPerc}\n                    bestWinPercPlayerOrTeam={bestTuesdayWinPercPlayer}\n                    bestAverage={bestTuesdayAverage}\n                    bestAveragePlayer={bestTuesdayAveragePlayer}\n                />\n            </div>\n        );\n    }\n\n    function thursdayComponent() {\n        return (\n            <div>\n                <StatsTableDisplay\n                    minGames={6}\n                    playerOrTeam={'Player'}\n                    mostWins={mostThursdayWins}\n                    mostWinsPlayer={mostThursdayWinsPlayer}\n                    bestWinPerc={bestThursdayWinPerc}\n                    bestWinPercPlayerOrTeam={bestThursdayWinPercPlayer}\n                    bestAverage={bestThursdayAverage}\n                    bestAveragePlayer={bestThursdayAveragePlayer}\n                />\n            </div>\n        );\n    }\n\n    function saturdayComponent() {\n        return (\n            <div>\n                <StatsTableDisplay\n                    minGames={6}\n                    playerOrTeam={'Player'}\n                    mostWins={mostSaturdayWins}\n                    mostWinsPlayer={mostSaturdayWinsPlayer}\n                    bestWinPerc={bestSaturdayWinPerc}\n                    bestWinPercPlayerOrTeam={bestSaturdayWinPercPlayer}\n                    bestAverage={bestSaturdayAverage}\n                    bestAveragePlayer={bestSaturdayAveragePlayer}\n                />\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <TeamTabs\n                id=\"player-record\"\n                allComponent={allComponent()}\n                mondayComponent={mondayComponent()}\n                tuesdayComponent={tuesdayComponent()}\n                thursdayComponent={thursdayComponent()}\n                saturdayComponent={saturdayComponent()}\n            />\n        </div>\n    );\n}\n\nexport default PlayerRecords;\n","export default __webpack_public_path__ + \"static/media/brand-logo-tiny.923a3133.png\";","export default __webpack_public_path__ + \"static/media/brand-logo.9a167be7.png\";","import React, { useEffect, useState } from 'react';\nimport { Navbar, Nav, Container } from 'react-bootstrap';\nimport TeamStats from './teamStats';\nimport PlayerStats from './playerStats';\nimport TeamRecords from './teamRecords';\nimport PlayerRecords from './playerRecords';\nimport bowlsStats from '../data/bowlsStats.json';\nimport smallLogo from './brand-logo-tiny.png';\nimport logo from './brand-logo.png';\n\nfunction Home() {\n    const [showPlayerStats, setShowPlayerStats] = useState(false);\n    const [showTeamStats, setShowTeamStats] = useState(false);\n    const [showPlayerRecords, setShowPlayerRecords] = useState(false);\n    const [showTeamRecords, setShowTeamRecords] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n\n    const playersStats = bowlsStats.playerResults;\n    const teamStats = bowlsStats.teamResults;\n\n    // TODO Handle multiple years worth of stats\n    useEffect(() => {\n        window.scrollTo(0, 0);\n        const url = window.location.href.toLowerCase();\n        if (loaded === false) {\n            if (url.includes('#team-stats')) {\n                displayTeamStats();\n            }\n            if (url.includes('#team-records')) {\n                displayTeamRecords();\n            }\n            if (url.includes('#player-stats')) {\n                displayPlayerStats();\n            }\n            if (url.includes('#player-records')) {\n                displayPlayerRecords();\n            }\n            // TODO this isn't working when clicking on home page\n            if (url.includes('#home')) {\n                setShowPlayerStats(false);\n                setShowTeamStats(false);\n                setShowPlayerRecords(false);\n                setShowTeamRecords(false);\n            }\n            setLoaded(true);\n        }\n    });\n\n    function displayPlayerStats() {\n        setShowPlayerStats(true);\n        setShowTeamStats(false);\n        setShowPlayerRecords(false);\n        setShowTeamRecords(false);\n    }\n\n    function displayTeamStats() {\n        setShowTeamStats(true);\n        setShowPlayerStats(false);\n        setShowPlayerRecords(false);\n        setShowTeamRecords(false);\n    }\n\n    function displayPlayerRecords() {\n        setShowPlayerRecords(true);\n        setShowTeamRecords(false);\n        setShowPlayerStats(false);\n        setShowTeamStats(false);\n    }\n\n    function displayTeamRecords() {\n        setShowTeamRecords(true);\n        setShowPlayerRecords(false);\n        setShowPlayerStats(false);\n        setShowTeamStats(false);\n    }\n\n    return (\n        <div id=\"home\">\n            <Navbar\n                collapseOnSelect\n                id=\"navbar\"\n                fixed=\"top\"\n                bg=\"light\"\n                variant=\"light\"\n                expand=\"md\"\n            >\n                <Container fluid>\n                    <Navbar.Brand href=\"#home\">\n                        <img\n                            alt=\"logo\"\n                            src={smallLogo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                        />\n                        SPBC\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"navbarScroll\" />\n                    <Navbar.Collapse id=\"navbarScroll\">\n                        <Nav\n                            className=\"me-auto\"\n                            style={{ maxHeight: '700px' }}\n                            navbarScroll\n                        >\n                            <Nav.Link\n                                onSelect={displayPlayerRecords}\n                                href=\"#player-records\"\n                            >\n                                PLAYER RECORDS\n                            </Nav.Link>\n                            <Nav.Link\n                                onSelect={displayTeamRecords}\n                                href=\"#team-records\"\n                            >\n                                TEAM RECORDS\n                            </Nav.Link>\n                            <Nav.Link\n                                onSelect={displayPlayerStats}\n                                href=\"#player-stats\"\n                            >\n                                PLAYER STATS\n                            </Nav.Link>\n                            <Nav.Link\n                                onSelect={displayTeamStats}\n                                href=\"#team-stats\"\n                            >\n                                TEAM STATS\n                            </Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n            <div id=\"header\">\n                <img\n                    alt=\"logo\"\n                    src={logo}\n                    width=\"240\"\n                    height=\"240\"\n                    className=\"d-inline-block align-top\"\n                />\n            </div>\n            {!showPlayerStats &&\n                !showTeamStats &&\n                !showTeamRecords &&\n                !showPlayerRecords && (\n                    <div id=\"welcome-text\">\n                        <p>\n                            Welcome to Stanningley Park Crown Green Bowling\n                            Club's website\n                        </p>\n                    </div>\n                )}\n            {/* TODO create links for socials */}\n            {/* TODO should I be passing the stats around or importing? */}\n            {showPlayerRecords && <PlayerRecords playersStats={playersStats} />}\n            {showTeamRecords && <TeamRecords stats={teamStats} />}\n            {showPlayerStats && <PlayerStats />}\n            {showTeamStats && <TeamStats />}\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/home';\nimport './app.css';\n\nfunction App() {\n    return (\n        <div id='app'>\n            <Home />\n            <link\n                rel='stylesheet'\n                href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n                crossOrigin='anonymous'\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}