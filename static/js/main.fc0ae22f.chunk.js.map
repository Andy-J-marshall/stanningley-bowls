{"version":3,"sources":["helpers/utils.js","components/individualTeamStats.js","components/combinedTeamStats.js","helpers/statsHelper.js","components/teamStats.js","components/players.js","components/playerStats.js","components/teamRecords.js","components/playerRecords.js","components/home.js","App.js","index.js"],"names":["capitalizeText","stringArray","stringArrayAsString","forEach","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","IndividualTeamStats","props","day","stats","playerStats","awayWins","homeWins","cupWins","cupLosses","awayLosses","homeLosses","homeDraws","awayDraws","stanningleyAgg","stanningleyTotalPoints","opponentAgg","opponentTotalPoints","beaten","beatenBy","drawnWith","allPlayerStats","Object","keys","map","player","toLowerCase","games","wins","average","aggDiff","totalDraws","totalWins","totalLosses","totalGames","id","key","Math","floor","random","toFixed","CombinedTeamStats","combinedStats","statsArray","combinedAwayWins","combinedHomeWins","combinedCupWins","combinedAwayLosses","combinedHomeLosses","combinedCupLosses","combinedHomeDraws","combinedAwayDraws","combinedStanningleyAgg","combinedStanningleyTotalPoints","combinedOpponentAgg","combinedOpponentTotalPoints","combinedBeaten","combinedBeatenBy","combinedDrawnWith","push","combineTeamStats","TeamStats","teamStats","bowlsStats","teamResults","playerResults","mondayStats","tuesdayStats","thursdayStats","saturdayStats","Players","playersStats","name","playerData","totalAgg","totalAggAgainst","totalPairsAgg","totalPairsAggAgainst","totalScore","totalScoreAgainst","winningPairsPartners","losingPairsPartners","beatenByTeam","beatenOpponents","beatenTeam","pairLosses","dayPlayed","pairWins","pairsPartners","totalHomeAgg","totalHomeAggAgainst","totalAwayAgg","totalAwayAggAgainst","totalHomeScore","totalHomeScoreAgainst","totalAwayScore","totalAwayScoreAgainst","monday","tuesday","thursday","saturday","gamesPlayed","homeGamesPlayed","awayGamesPlayed","homeAverage","awayAverage","averageScore","averageScoreAgainst","homeAverageScore","homeAverageScoreAgainst","awayAverageScore","awayAverageScoreAgainst","pairsGames","mondayWins","mondayGames","mondayAvg","tuesdayWins","tuesdayGames","tuesdayAvg","thursdayWins","thursdayGames","thursdayAvg","saturdayWins","saturdayGames","saturdayAvg","daysPlayedCount","filter","pairsPartnersCount","calculatePairsPartnersCount","pairsPartnersCountWins","pairsPartnersCountLosses","allPairsPartners","uniquePartners","partner","indexOf","partnersReturnObj","reduce","partnerObj","timesPaired","includes","ListGroup","Item","length","PlayerStats","p","playerName","JSON","stringify","TeamRecords","bestWinPercentage","bestWinPercentageTeam","bestTeamPointsPerGame","bestTeamPointsPerGameTeam","bestTeamAggPerGame","bestTeamAggPerGameTeam","fewestPointsConcededPerGame","fewestPointsConcededPerGameTeam","lowestAggConcededPerGame","lowestAggConcededPerGameTeam","draws","winPercentage","gamesPerMatch","pointsPerGame","aggPerGame","pointsConcededPerGame","aggConcededPerGame","pop","PlayerRecords","players","mostMondayWinsPlayer","mostMondayWins","mostTuesdayWinsPlayer","mostTuesdayWins","mostThursdayWinsPlayer","mostThursdayWins","mostSaturdayWinsPlayer","mostSaturdayWins","bestMondayAveragePlayer","bestMondayAverage","bestTuesdayAveragePlayer","bestTuesdayAverage","bestThursdayAveragePlayer","bestThursdayAverage","bestSaturdayAveragePlayer","bestSaturdayAverage","mostGamesPlayer","mostGames","mostWinsPlayer","mostWins","bestWinPercPlayer","bestWinPerc","bestAveragePlayer","bestAverage","bestScorePlayer","bestScore","winPerc","score","playedMinGames","Home","useState","showPlayerStats","setShowPlayerStats","showTeamStats","setShowTeamStats","showPlayerRecords","setShowPlayerRecords","showTeamRecords","setShowTeamRecords","Navbar","fixed","bg","variant","Brand","href","Nav","className","Link","onSelect","style","fontSize","App","rel","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc0ae22f.chunk.js","sourcesContent":["export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] =\n                array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        });\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString =\n            index === 0\n                ? capitalizedString\n                : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction IndividualTeamStats(props) {\n    const day = props.day;\n    const stats = props.stats;\n    const playerStats = props.playerStats;\n    const index = props.index;\n\n    const {\n        awayWins,\n        homeWins,\n        cupWins,\n        cupLosses,\n        awayLosses,\n        homeLosses,\n        homeDraws,\n        awayDraws,\n        stanningleyAgg,\n        stanningleyTotalPoints,\n        opponentAgg,\n        opponentTotalPoints,\n        beaten,\n        beatenBy,\n        drawnWith,\n    } = stats;\n\n    const allPlayerStats = Object.keys(playerStats).map((player) => {\n        const stats = playerStats[player][day.toLowerCase()];\n        const { games, wins, aggDiff } = stats;\n        const playerDayStats = {\n            player,\n            games,\n            wins,\n            average: aggDiff / games,\n        };\n        return playerDayStats;\n    });\n\n    const totalDraws = awayDraws + homeDraws;\n    const totalWins = awayWins + homeWins + cupWins;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return (\n        <div id={day + '-team-results'}>\n            <h4>Stats for {day}</h4>\n            <div id={day + '-team-win-losses'}>\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && (\n                    <p>\n                        ({homeWins} home, {awayWins} away, {cupWins} cup)\n                    </p>\n                )}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && (\n                    <p>\n                        ({homeLosses} home, {awayLosses} away, {cupLosses} cup)\n                    </p>\n                )}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && (\n                    <p>\n                        ({homeDraws} home, {awayDraws} away)\n                    </p>\n                )}\n            </div>\n            <div id={day + '-team-aggregates'}>\n                <p>Stanningley aggregate = {stanningleyAgg}</p>\n                <p>Opponents aggregate = {opponentAgg}</p>\n                <p>Stanningley team score = {stanningleyTotalPoints}</p>\n                <p>Opponents team score = {opponentTotalPoints}</p>\n            </div>\n            <div id={day + '-team-opponents'}>\n                {totalWins > 0 && (\n                    <p>Teams beaten = {capitalizeText(beaten)}</p>\n                )}\n                {totalLosses > 0 && (\n                    <p>Teams lost to = {capitalizeText(beatenBy)}</p>\n                )}\n                {totalDraws > 0 && (\n                    <p>Teams drawn with = {capitalizeText(drawnWith)}</p>\n                )}\n            </div>\n            {allPlayerStats.map((player) => {\n                const key = Math.floor(Math.random() * 100000 + index);\n                return (\n                    <div key={key}>\n                        {player.games > 0 && <h4>{capitalizeText([player.player])}</h4>}\n                        {player.games > 0 && <p>\n                            {player.games} games played, {player.wins} games\n                            won ({player.average.toFixed(2)} average)\n                        </p>}\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default IndividualTeamStats;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\nimport { combineTeamStats } from '../helpers/statsHelper';\n\nfunction CombinedTeamStats(props) {\n    const stats = props.stats;\n\n    const combinedStats = combineTeamStats(stats);\n    const {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupWins,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    } = combinedStats;\n\n    return (\n        <div id='combined-team-results'>\n            <h1>Combined Stats For All Teams</h1>\n            <div id='combined-team-win-losses'>\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && (\n                    <p>\n                        ({combinedHomeWins} home, {combinedAwayWins} away,{' '}\n                        {combinedCupWins} cup)\n                    </p>\n                )}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && (\n                    <p>\n                        ({combinedHomeLosses} home, {combinedAwayLosses} away,{' '}\n                        {combinedCupLosses} cup)\n                    </p>\n                )}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && (\n                    <p>\n                        ({combinedHomeDraws} home, {combinedAwayDraws} away)\n                    </p>\n                )}\n            </div>\n            <div id='combined-team-aggregates'>\n                <p>Stanningley aggregate = {combinedStanningleyAgg}</p>\n                <p>Opponents aggregate = {combinedOpponentAgg}</p>\n                <p>Stanningley team score = {combinedStanningleyTotalPoints}</p>\n                <p>Opponents team score = {combinedOpponentTotalPoints}</p>\n            </div>\n            <div id='combined-team-opponents'>\n                {totalWins > 0 && (\n                    <p>Teams beaten = {capitalizeText(combinedBeaten)}</p>\n                )}\n                {totalLosses > 0 && (\n                    <p>Teams lost to = {capitalizeText(combinedBeatenBy)}</p>\n                )}\n                {totalDraws > 0 && (\n                    <p>\n                        Teams drawn with = {capitalizeText(combinedDrawnWith)}\n                    </p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default CombinedTeamStats;\n","export function combineTeamStats(statsArray) {\n    let combinedAwayWins = 0;\n    let combinedHomeWins = 0;\n    let combinedCupWins = 0;\n    let combinedAwayLosses = 0;\n    let combinedHomeLosses = 0;\n    let combinedCupLosses = 0;\n    let combinedHomeDraws = 0;\n    let combinedAwayDraws = 0;\n    let combinedStanningleyAgg = 0;\n    let combinedStanningleyTotalPoints = 0;\n    let combinedOpponentAgg = 0;\n    let combinedOpponentTotalPoints = 0;\n    let combinedBeaten = [];\n    let combinedBeatenBy = [];\n    let combinedDrawnWith = [];\n\n    statsArray.forEach((stats) => {\n        const {\n            awayWins,\n            homeWins,\n            cupWins,\n            awayLosses,\n            homeLosses,\n            cupLosses,\n            homeDraws,\n            awayDraws,\n            stanningleyAgg,\n            stanningleyTotalPoints,\n            opponentAgg,\n            opponentTotalPoints,\n            beaten,\n            beatenBy,\n            drawnWith,\n        } = stats;\n        combinedAwayWins += awayWins;\n        combinedHomeWins += homeWins;\n        combinedAwayLosses += awayLosses;\n        combinedHomeLosses += homeLosses;\n        combinedHomeDraws += homeDraws;\n        combinedAwayDraws += awayDraws;\n        combinedCupWins += cupWins;\n        combinedCupLosses += cupLosses;\n        combinedStanningleyAgg += stanningleyAgg;\n        combinedStanningleyTotalPoints += stanningleyTotalPoints;\n        combinedOpponentAgg += opponentAgg;\n        combinedOpponentTotalPoints += opponentTotalPoints;\n        combinedBeaten.push(...beaten);\n        combinedBeatenBy.push(...beatenBy);\n        combinedDrawnWith.push(...drawnWith);\n    });\n\n    const totalDraws = combinedAwayDraws + combinedHomeDraws;\n    const totalWins = combinedAwayWins + combinedHomeWins + combinedCupWins;\n    const totalLosses =\n        combinedAwayLosses + combinedHomeLosses + combinedCupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedCupWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    };\n}\n","import React from 'react';\nimport IndividualTeamStats from './individualTeamStats';\nimport CombinedTeamStats from './combinedTeamStats';\nimport bowlsStats from '../data/bowlsStats.json';\n\nfunction TeamStats() {\n    const teamStats = bowlsStats.teamResults;\n    const playerStats = bowlsStats.playerResults;\n    // TODO get the teamStats in a better way than using array\n    const mondayStats = teamStats[0];\n    const tuesdayStats = teamStats[1];\n    const thursdayStats = teamStats[2];\n    const saturdayStats = teamStats[3];\n\n    return (\n        <div id=\"team-stats\">\n            <CombinedTeamStats stats={teamStats} />\n            <div>\n                <IndividualTeamStats\n                    index={1}\n                    day=\"Monday\"\n                    stats={mondayStats}\n                    playerStats={playerStats}\n                />\n                <IndividualTeamStats\n                    index={2}\n                    day=\"Tuesday\"\n                    stats={tuesdayStats}\n                    playerStats={playerStats}\n                />\n                <IndividualTeamStats\n                    index={3}\n                    day=\"Thursday\"\n                    stats={thursdayStats}\n                    playerStats={playerStats}\n                />\n                <IndividualTeamStats\n                    index={4}\n                    day=\"Saturday\"\n                    stats={saturdayStats}\n                    playerStats={playerStats}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default TeamStats;\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction Players(props) {\n    const index = props.index;\n    const player = props.player;\n    const playersStats = props.playersStats;\n    const name = props.name;\n\n    const playerData = playersStats[player];\n    let {\n        totalAgg,\n        totalAggAgainst,\n        totalPairsAgg,\n        totalPairsAggAgainst,\n        totalScore,\n        totalScoreAgainst,\n        awayLosses,\n        homeLosses,\n        cupLosses,\n        homeWins,\n        awayWins,\n        cupWins,\n        winningPairsPartners,\n        losingPairsPartners,\n        beatenBy,\n        beatenByTeam,\n        beatenOpponents,\n        beatenTeam,\n        dayPlayed,\n        pairLosses,\n        pairWins,\n        pairsPartners,\n        totalHomeAgg,\n        totalHomeAggAgainst,\n        totalAwayAgg,\n        totalAwayAggAgainst,\n        totalHomeScore,\n        totalHomeScoreAgainst,\n        totalAwayScore,\n        totalAwayScoreAgainst,\n        monday,\n        tuesday,\n        thursday,\n        saturday,\n    } = playerData;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalWins = awayWins + homeWins + cupWins;\n    const gamesPlayed = totalLosses + totalWins;\n    const homeGamesPlayed = homeWins + homeLosses;\n    const awayGamesPlayed = awayWins + awayLosses;\n    const average = (totalAgg - totalAggAgainst) / gamesPlayed;\n    const homeAverage = (totalHomeAgg - totalHomeAggAgainst) / homeGamesPlayed;\n    const awayAverage = (totalAwayAgg - totalAwayAggAgainst) / awayGamesPlayed;\n    const averageScore = totalScore / gamesPlayed;\n    const averageScoreAgainst = totalScoreAgainst / gamesPlayed;\n    const homeAverageScore = totalHomeScore / homeGamesPlayed;\n    const homeAverageScoreAgainst = totalHomeScoreAgainst / homeGamesPlayed;\n    const awayAverageScore = totalAwayScore / awayGamesPlayed;\n    const awayAverageScoreAgainst = totalAwayScoreAgainst / awayGamesPlayed;\n    beatenBy = capitalizeText(beatenBy);\n    beatenOpponents = capitalizeText(beatenOpponents);\n    beatenByTeam = capitalizeText(beatenByTeam);\n    beatenTeam = capitalizeText(beatenTeam);\n    const pairsGames = pairLosses + pairWins;    \n    const mondayWins = monday.wins;\n    const mondayGames = monday.games;\n    const mondayAvg = monday.aggDiff / mondayGames;\n    const tuesdayWins = tuesday.wins;\n    const tuesdayGames = tuesday.games;\n    const tuesdayAvg = tuesday.aggDiff / tuesdayGames;\n    const thursdayWins = thursday.wins;\n    const thursdayGames = thursday.games;\n    const thursdayAvg = thursday.aggDiff / thursdayGames;\n    const saturdayWins = saturday.wins;\n    const saturdayGames = saturday.games;\n    const saturdayAvg = saturday.aggDiff / saturdayGames;\n    let daysPlayedCount = [\n        { day: 'Monday', gamesPlayed: mondayGames },\n        { day: 'Tuesday', gamesPlayed: tuesdayGames },\n        { day: 'Thursday', gamesPlayed: thursdayGames },\n        { day: 'Saturday', gamesPlayed: saturdayGames },\n    ]\n    daysPlayedCount = daysPlayedCount.filter((day) => day.gamesPlayed > 0);\n\n    const pairsPartnersCount = calculatePairsPartnersCount(pairsPartners);\n    const pairsPartnersCountWins =\n        calculatePairsPartnersCount(winningPairsPartners);\n    const pairsPartnersCountLosses =\n        calculatePairsPartnersCount(losingPairsPartners);\n\n    function calculatePairsPartnersCount(allPairsPartners) {\n        const uniquePartners = allPairsPartners.filter((partner, index) => {\n            return allPairsPartners.indexOf(partner) === index;\n        });\n        const partnersReturnObj = uniquePartners.reduce(\n            (partnerObj, player) => {\n                partnerObj[player] = { timesPaired: 0 };\n                return partnerObj;\n            },\n            {}\n        );\n\n        allPairsPartners.forEach((partner) => {\n            if (uniquePartners.includes(partner)) {\n                partnersReturnObj[partner].timesPaired += 1;\n            }\n        });\n        return partnersReturnObj;\n    }\n\n    // TODO handle plurals\n    return (\n        <div>\n            <ListGroup.Item key={index}>\n                <div>\n                    <h4>{capitalizeText([name])}</h4>\n                    {gamesPlayed === 0 && <p>No games played</p>}\n                    {gamesPlayed > 0 && (\n                        <div>\n                            <h5>Games</h5>\n                            <p>{gamesPlayed} games played in total</p>\n                            {daysPlayedCount.map((day) => {\n                                const key = Math.floor(\n                                    Math.random() * 100000 + index\n                                );\n                                return (\n                                    <p key={key}>\n                                        {day.gamesPlayed} games played on{' '}\n                                        {day.day}\n                                    </p>\n                                );\n                            })}\n                            {pairsGames > 0 && (\n                                <p>{pairsGames} pairs games played</p>\n                            )}\n\n                            <h5>Results</h5>\n                            {totalWins > 0 && (\n                                <div>\n                                    <p>\n                                        {totalWins} wins ({homeWins} home,{' '}\n                                        {awayWins} away, {cupWins} cup)\n                                    </p>\n                                    {mondayGames > 0 && <p>{mondayWins} Monday wins</p>}\n                                    {tuesdayGames > 0 && <p>{tuesdayWins} Tuesday wins</p>}\n                                    {thursdayGames > 0 && <p>{thursdayWins} Thursday wins</p>}\n                                    {saturdayGames > 0 && <p>{saturdayWins} Saturday wins</p>}\n                                </div>\n                            )}\n                            {totalLosses > 0 && (\n                                <p>\n                                    {totalLosses} losses ({homeLosses} home,{' '}\n                                    {awayLosses} away, {cupLosses} cup)\n                                </p>\n                            )}\n                            <p>\n                                {((totalWins / gamesPlayed) * 100).toFixed(0)}%\n                                win percentage\n                            </p>\n\n                            {pairsGames > 0 && (\n                                <div>\n                                    <h5>Pairs</h5>\n                                    <p>{pairsGames} pairs games played</p>\n                                    <p>{pairWins} pairs wins</p>\n                                    <p>{pairLosses} pairs losses</p>\n                                    {pairsPartners.length > 0 &&\n                                        Object.keys(pairsPartnersCount).map(\n                                            (partner) => {\n                                                const key = Math.floor(\n                                                    Math.random() * 100000 +\n                                                        index\n                                                );\n                                                return (\n                                                    <p key={key}>\n                                                        {\n                                                            pairsPartnersCount[\n                                                                partner\n                                                            ].timesPaired\n                                                        }{' '}\n                                                        games played with{' '}\n                                                        {partner}\n                                                    </p>\n                                                );\n                                            }\n                                        )}\n                                    {pairWins > 0 &&\n                                        Object.keys(pairsPartnersCountWins).map(\n                                            (partner) => {\n                                                const key = Math.floor(\n                                                    Math.random() * 100000 +\n                                                        index\n                                                );\n                                                return (\n                                                    <p key={key}>\n                                                        {\n                                                            pairsPartnersCountWins[\n                                                                partner\n                                                            ].timesPaired\n                                                        }{' '}\n                                                        games won with {partner}\n                                                    </p>\n                                                );\n                                            }\n                                        )}\n                                    {pairLosses > 0 &&\n                                        Object.keys(\n                                            pairsPartnersCountLosses\n                                        ).map((partner) => {\n                                            const key = Math.floor(\n                                                Math.random() * 100000 + index\n                                            );\n                                            return (\n                                                <p key={key}>\n                                                    {\n                                                        pairsPartnersCountLosses[\n                                                            partner\n                                                        ].timesPaired\n                                                    }{' '}\n                                                    games lost with {partner}\n                                                </p>\n                                            );\n                                        })}\n                                </div>\n                            )}\n\n                            <h5>Opponents</h5>\n                            {beatenOpponents.length > 0 && (\n                                <p>Beaten opponents = {beatenOpponents}</p>\n                            )}\n                            {beatenBy.length > 0 && (\n                                <p>Defeated by = {beatenBy}</p>\n                            )}\n                            {beatenTeam.length > 0 && (\n                                <p>Beaten team = {beatenTeam}</p>\n                            )}\n                            {beatenByTeam.length > 0 && (\n                                <p>Teams lost to = {beatenByTeam}</p>\n                            )}\n\n                            <div>\n                                <h5>Averages</h5>\n                                {average >= -21 && (\n                                    <div>\n                                        <p>Average = {average.toFixed(2)}</p>\n                                        {homeAverage > -22 && (\n                                            <p>\n                                                Home average =\n                                                {homeAverage.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {awayAverage > -22 && (\n                                            <p>\n                                                Away average =\n                                                {awayAverage.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {mondayGames > 0 && (\n                                            <p>\n                                                Monday average =\n                                                {mondayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {tuesdayGames > 0 && (\n                                            <p>\n                                                Tuesday average =\n                                                {tuesdayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {thursdayGames > 0 && (\n                                            <p>\n                                                Thursday average =\n                                                {thursdayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                        {saturdayGames > 0 && (\n                                            <p>\n                                                Saturday average =\n                                                {saturdayAvg.toFixed(2)}\n                                            </p>\n                                        )}\n                                    </div>\n                                )}\n                                {averageScore >= 0 && (\n                                    <div>\n                                        <p>\n                                            Average score ={' '}\n                                            {averageScore.toFixed(2)} / 5\n                                        </p>\n                                        <p>\n                                            Average opponents score ={' '}\n                                            {averageScoreAgainst.toFixed(2)} / 5\n                                        </p>\n                                        {homeAverageScore >= 0 && (\n                                            <div>\n                                                <p>\n                                                    Average home score ={' '}\n                                                    {homeAverageScore.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                                <p>\n                                                    Average home opponents score\n                                                    ={' '}\n                                                    {homeAverageScoreAgainst.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                            </div>\n                                        )}\n                                        {awayAverageScore >= 0 && (\n                                            <div>\n                                                <p>\n                                                    Average away score ={' '}\n                                                    {awayAverageScore.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                                <p>\n                                                    Average away opponents score\n                                                    ={' '}\n                                                    {awayAverageScoreAgainst.toFixed(\n                                                        2\n                                                    )}{' '}\n                                                    / 5\n                                                </p>\n                                            </div>\n                                        )}\n                                    </div>\n                                )}\n\n                                <h5>Aggregates</h5>\n                                <p>\n                                    <b>Points</b>\n                                </p>\n                                <p>\n                                    Total aggregate scored = {totalAgg} /{' '}\n                                    {gamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total aggregate conceded = {totalAggAgainst}{' '}\n                                    / {gamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total home aggregate scored = {totalHomeAgg}{' '}\n                                    / {homeGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total home aggregate conceded ={' '}\n                                    {totalHomeAggAgainst} /{' '}\n                                    {homeGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total away aggregate scored = {totalAwayAgg}{' '}\n                                    / {awayGamesPlayed * 21}\n                                </p>\n                                <p>\n                                    Total away aggregate conceded ={' '}\n                                    {totalAwayAggAgainst} /{' '}\n                                    {awayGamesPlayed * 21}\n                                </p>\n                                {pairsGames > 0 && (\n                                    <p>\n                                        Total pairs aggregate scored ={' '}\n                                        {totalPairsAgg} / {pairsGames * 21}\n                                    </p>\n                                )}\n                                {pairsGames > 0 && (\n                                    <p>\n                                        Total pairs aggregate conceded =\n                                        {totalPairsAggAgainst} /\n                                        {pairsGames * 21}\n                                    </p>\n                                )}\n\n                                <p>\n                                    <b>Team Points</b>\n                                </p>\n                                <p>\n                                    Total points scored = {totalScore} /{' '}\n                                    {gamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total points conceded = {totalScoreAgainst}{' '}\n                                    / {gamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total home points scored = {totalHomeScore}{' '}\n                                    / {homeGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total home points conceded ={' '}\n                                    {totalHomeScoreAgainst} /{' '}\n                                    {homeGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total away points scored = {totalAwayScore}/{' '}\n                                    {awayGamesPlayed * 5}\n                                </p>\n                                <p>\n                                    Total away points conceded ={' '}\n                                    {totalAwayScoreAgainst} /{' '}\n                                    {awayGamesPlayed * 5}\n                                </p>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </ListGroup.Item>\n        </div>\n    );\n}\n\nexport default Players;\n","import React from 'react';\nimport Player from './players';\nimport { ListGroup } from 'react-bootstrap';\nimport bowlsStats from '../data/bowlsStats.json';\n\nfunction PlayerStats() {\n    const playersStats = bowlsStats.playerResults;\n    const keys = Object.keys(playersStats);\n\n    // TODO get rid of the blue bar?\n    return (\n        <div id=\"player-stats\">\n            <h1>Player Stats</h1>\n            <ListGroup>\n                {keys.map((p, index) => {\n                    const playerName = keys[index];\n                    return (\n                        <Player\n                            key={index}\n                            index={index}\n                            player={p}\n                            name={playerName}\n                            playersStats={playersStats}\n                        >\n                            {JSON.stringify(playersStats[p])}\n                        </Player>\n                    );\n                })}\n            </ListGroup>\n        </div>\n    );\n}\n\nexport default PlayerStats;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction TeamRecords(props) {\n    const statsArray = props.stats;\n\n    let bestWinPercentage = -1;\n    let bestWinPercentageTeam = [];\n    let bestTeamPointsPerGame = -1;\n    let bestTeamPointsPerGameTeam = [];\n    let bestTeamAggPerGame = -1;\n    let bestTeamAggPerGameTeam = [];\n    let fewestPointsConcededPerGame = 100;\n    let fewestPointsConcededPerGameTeam = [];\n    let lowestAggConcededPerGame = 1000;\n    let lowestAggConcededPerGameTeam = [];\n\n    statsArray.forEach((stats) => {\n        const {\n            day,\n            awayWins,\n            homeWins,\n            cupWins,\n            awayLosses,\n            homeLosses,\n            cupLosses,\n            homeDraws,\n            awayDraws,\n            stanningleyAgg,\n            stanningleyTotalPoints,\n            opponentAgg,\n            opponentTotalPoints,\n        } = stats;\n        const wins = awayWins + homeWins + cupWins;\n        const losses = awayLosses + homeLosses + cupLosses;\n        const draws = awayDraws + homeDraws;\n        const drawPoints = draws > 0 ? draws * 0.5 : 0;\n        const totalGames = wins + losses + homeDraws + awayDraws;\n        const winPercentage = ((wins + drawPoints) / totalGames) * 100;\n\n        const gamesPerMatch = day === 'Monday' ? 6 : 8;\n        const pointsPerGame =\n            stanningleyTotalPoints /\n            gamesPerMatch /\n            (totalGames - cupLosses - cupWins); // cup games are decided on pure aggregate\n        const aggPerGame = stanningleyAgg / gamesPerMatch / totalGames;\n        const pointsConcededPerGame =\n            opponentTotalPoints /\n            gamesPerMatch /\n            (totalGames - cupLosses - cupWins);\n        const aggConcededPerGame = opponentAgg / gamesPerMatch / totalGames;\n\n        if (aggPerGame >= bestTeamAggPerGame && totalGames >= 2) {\n            if (aggPerGame !== bestTeamAggPerGame) {\n                bestTeamAggPerGameTeam.pop();\n            }\n            bestTeamAggPerGameTeam.push(`${day} (${totalGames} games)`);\n            bestTeamAggPerGame = aggPerGame;\n        }\n        if (pointsPerGame >= bestTeamPointsPerGame && totalGames >= 2) {\n            if (pointsPerGame !== bestTeamPointsPerGame) {\n                bestTeamPointsPerGameTeam.pop();\n            }\n            bestTeamPointsPerGameTeam.push(`${day} (${totalGames} games)`);\n            bestTeamPointsPerGame = pointsPerGame;\n        }\n        if (pointsConcededPerGame <= fewestPointsConcededPerGame && totalGames >= 2) {\n            if (pointsConcededPerGame !== fewestPointsConcededPerGame) {\n                fewestPointsConcededPerGameTeam.pop();\n            }\n            fewestPointsConcededPerGameTeam.push(\n                `${day} (${totalGames} games)`\n            );\n            fewestPointsConcededPerGame = pointsConcededPerGame;\n        }\n        if (aggConcededPerGame <= lowestAggConcededPerGame && totalGames >= 2) {\n            if (aggConcededPerGame !== lowestAggConcededPerGame) {\n                lowestAggConcededPerGameTeam.pop();\n            }\n            lowestAggConcededPerGameTeam.push(`${day} (${totalGames} games)`);\n            lowestAggConcededPerGame = aggConcededPerGame;\n        }\n        if (winPercentage >= bestWinPercentage && totalGames >= 2) {\n            if (winPercentage !== bestWinPercentage) {\n                bestWinPercentageTeam.pop();\n            }\n            bestWinPercentageTeam.push(`${day} (${totalGames} games)`);\n            bestWinPercentage = winPercentage;\n        }\n    });\n\n    return (\n        <div id=\"team-records\">\n            <h1>Team Records</h1>\n            {bestWinPercentage > 0 && (\n                <div>\n                    <p>\n                        Best win percentage = {bestWinPercentage.toFixed(0)}% -{' '}\n                        {capitalizeText(bestWinPercentageTeam)}\n                    </p>\n                </div>\n            )}\n\n            {bestTeamPointsPerGame > 0 && (\n                <div>\n                    <p>\n                        Best points per game ={' '}\n                        {bestTeamPointsPerGame.toFixed(1)} / 5 -{' '}\n                        {capitalizeText(bestTeamPointsPerGameTeam)}\n                    </p>\n                </div>\n            )}\n            {bestTeamAggPerGame > 0 && (\n                <div>\n                    <p>\n                        Best agg per game = {bestTeamAggPerGame.toFixed(1)} / 21\n                        - {capitalizeText(bestTeamAggPerGameTeam)}\n                    </p>\n                </div>\n            )}\n            {fewestPointsConcededPerGame >= 0 && (\n                <div>\n                    <p>\n                        Fewest points conceded per game ={' '}\n                        {fewestPointsConcededPerGame.toFixed(1)} / 5 -{' '}\n                        {capitalizeText(fewestPointsConcededPerGameTeam)}\n                    </p>\n                </div>\n            )}\n\n            {lowestAggConcededPerGame > 0 && (\n                <div>\n                    <p>\n                        Fewest aggregated points conceded per game ={' '}\n                        {lowestAggConcededPerGame.toFixed(1)} / 21 -{' '}\n                        {capitalizeText(lowestAggConcededPerGameTeam)}\n                    </p>\n                </div>\n            )}\n            <p>\n                * Minimum of 2 games required\n            </p>\n        </div>\n    );\n}\n\nexport default TeamRecords;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction PlayerRecords(props) {\n    const playersStats = props.playersStats;\n    const players = Object.keys(playersStats);\n\n    let mostMondayWinsPlayer = [];\n    let mostMondayWins = 0;\n    let mostTuesdayWinsPlayer = [];\n    let mostTuesdayWins = 0;\n    let mostThursdayWinsPlayer = [];\n    let mostThursdayWins = 0;\n    let mostSaturdayWinsPlayer = [];\n    let mostSaturdayWins = 0;\n    let bestMondayAveragePlayer = [];\n    let bestMondayAverage = -21;\n    let bestTuesdayAveragePlayer = [];\n    let bestTuesdayAverage = -21;\n    let bestThursdayAveragePlayer = [];\n    let bestThursdayAverage = -21;\n    let bestSaturdayAveragePlayer = [];\n    let bestSaturdayAverage = -21;\n    let mostGamesPlayer = [];\n    let mostGames = 0;\n    let mostWinsPlayer = [];\n    let mostWins = 0;\n    let bestWinPercPlayer = [];\n    let bestWinPerc = 0;\n    let bestAveragePlayer = [];\n    let bestAverage = -21;\n    let bestScorePlayer = [];\n    let bestScore = 0;\n\n    players.forEach((player) => {\n        const p = playersStats[player];\n        const totalWins = p.awayWins + p.homeWins + p.cupWins;\n        const totalLosses = p.awayLosses + p.homeLosses + p.cupLosses;\n        const totalGames = totalWins + totalLosses;\n        const winPerc = (totalWins / totalGames) * 100;\n        const average = (p.totalAgg - p.totalAggAgainst) / totalGames;\n        const score = p.totalScore / totalGames;\n\n        const { monday, tuesday, thursday, saturday } = p;\n        const mondayWins = monday.wins;\n        const mondayGames = monday.games;\n        const mondayAvg = monday.aggDiff / mondayGames;\n        const tuesdayWins = tuesday.wins;\n        const tuesdayGames = tuesday.games;\n        const tuesdayAvg = tuesday.aggDiff / tuesdayGames;\n        const thursdayWins = thursday.wins;\n        const thursdayGames = thursday.games;\n        const thursdayAvg = thursday.aggDiff / thursdayGames;\n        const saturdayWins = saturday.wins;\n        const saturdayGames = saturday.games;\n        const saturdayAvg = saturday.aggDiff / saturdayGames;\n\n        const playedMinGames = totalGames >= 10 ? true : false;\n\n        if (mondayAvg >= bestMondayAverage && mondayGames >= 6) {\n            if (mondayAvg > bestMondayAverage) {\n                bestMondayAveragePlayer = [];\n                bestMondayAverage = mondayAvg;\n            }\n            bestMondayAveragePlayer.push(`${player} - ${mondayGames} games`);\n        }\n        if (tuesdayAvg >= bestTuesdayAverage && tuesdayGames >= 6) {\n            if (tuesdayAvg > bestTuesdayAverage) {\n                bestTuesdayAveragePlayer = [];\n                bestTuesdayAverage = tuesdayAvg;\n            }\n            bestTuesdayAveragePlayer.push(`${player} - ${tuesdayGames} games`);\n        }\n        if (thursdayAvg >= bestThursdayAverage && thursdayGames >= 6) {\n            if (thursdayAvg > bestThursdayAverage) {\n                bestThursdayAveragePlayer = [];\n                bestThursdayAverage = thursdayAvg;\n            }\n            bestThursdayAveragePlayer.push(\n                `${player} - ${thursdayGames} games`\n            );\n        }\n        if (saturdayAvg >= bestSaturdayAverage && saturdayGames >= 6) {\n            if (saturdayAvg > bestSaturdayAverage) {\n                bestSaturdayAveragePlayer = [];\n                bestSaturdayAverage = saturdayAvg;\n            }\n            bestSaturdayAveragePlayer.push(\n                `${player} - ${saturdayGames} games`\n            );\n        }\n        if (mondayWins >= mostMondayWins) {\n            if (mondayWins > mostMondayWins) {\n                mostMondayWinsPlayer = [];\n                mostMondayWins = mondayWins;\n            }\n            mostMondayWinsPlayer.push(`${player} - ${mondayGames} games`);\n        }\n        if (tuesdayWins >= mostTuesdayWins) {\n            if (tuesdayWins > mostTuesdayWins) {\n                mostTuesdayWinsPlayer = [];\n                mostTuesdayWins = tuesdayWins;\n            }\n            mostTuesdayWinsPlayer.push(`${player} - ${tuesdayGames} games`);\n        }\n        if (thursdayWins >= mostThursdayWins) {\n            if (thursdayWins > mostThursdayWins) {\n                mostThursdayWinsPlayer = [];\n                mostThursdayWins = thursdayWins;\n            }\n            mostThursdayWinsPlayer.push(`${player} - ${thursdayGames} games`);\n        }\n        if (saturdayWins >= mostSaturdayWins) {\n            if (saturdayWins > mostSaturdayWins) {\n                mostSaturdayWinsPlayer = [];\n                mostSaturdayWins = saturdayWins;\n            }\n            mostSaturdayWinsPlayer.push(`${player} - ${saturdayGames} games`);\n        }\n        if (totalGames >= mostGames) {\n            if (totalGames > mostGames) {\n                mostGamesPlayer = [];\n                mostGames = totalGames;\n            }\n            mostGamesPlayer.push(player);\n        }\n        if (totalWins >= mostWins) {\n            if (totalWins > mostWins) {\n                mostWinsPlayer = [];\n                mostWins = totalWins;\n            }\n            mostWinsPlayer.push(`${player} - ${totalGames} games`);\n        }\n        if (winPerc >= bestWinPerc && playedMinGames) {\n            if (winPerc > bestWinPerc) {\n                bestWinPercPlayer = [];\n                bestWinPerc = winPerc;\n            }\n            bestWinPercPlayer.push(`${player} - ${totalGames} games`);\n        }\n        if (average >= bestAverage && playedMinGames) {\n            if (average > bestAverage) {\n                bestAveragePlayer = [];\n                bestAverage = average;\n            }\n            bestAveragePlayer.push(`${player} - ${totalGames} games`);\n        }\n        if (score >= bestScore && playedMinGames) {\n            if (score > bestScore) {\n                bestScorePlayer = [];\n                bestScore = score;\n            }\n            bestScorePlayer.push(`${player} - ${totalGames} games`);\n        }\n    });\n\n    return (\n        <div id='player-records'>\n            <h1>Player Records</h1>\n            <p>\n                <b>Combined Team Records</b>\n            </p>\n            {mostGames > 0 && (\n                <p>\n                    Most games played = {mostGames} (\n                    {capitalizeText(mostGamesPlayer)})\n                </p>\n            )}\n            {mostWins > 0 && (\n                <p>\n                    Most combined wins = {mostWins} (\n                    {capitalizeText(mostWinsPlayer)})\n                </p>\n            )}\n            {bestWinPerc > 0 && (\n                <p>\n                    Best win percentage = {bestWinPerc.toFixed(0)}% (\n                    {capitalizeText(bestWinPercPlayer)})\n                </p>\n            )}\n            {bestAverage >= -21 && (\n                <p>\n                    Best combined average = {bestAverage.toFixed(2)} (\n                    {capitalizeText(bestAveragePlayer)})\n                </p>\n            )}\n            {bestScore > 0 && (\n                <p>\n                    Best average team score per game = {bestScore.toFixed(2)} (\n                    {capitalizeText(bestScorePlayer)})\n                </p>\n            )}\n            <p>\n                * Combined averages/ win percentage counted after minimum of 10\n                games\n            </p>\n            <h4>Individual Team Records</h4>\n            <div>\n                <p>\n                    <b>Monday</b>\n                </p>\n                {mostMondayWins > 0 && (\n                    <p>\n                        Most wins = {mostMondayWins} (\n                        {capitalizeText(mostMondayWinsPlayer)})\n                    </p>\n                )}\n                {bestMondayAverage >= -21 && (\n                    <p>\n                        Best average = {bestMondayAverage.toFixed(2)} (\n                        {capitalizeText(bestMondayAveragePlayer)})\n                    </p>\n                )}\n            </div>\n            <div>\n                <p>\n                    <b>Tuesday</b>\n                </p>\n                {mostTuesdayWins > 0 && (\n                    <p>\n                        Most wins = {mostTuesdayWins} (\n                        {capitalizeText(mostTuesdayWinsPlayer)})\n                    </p>\n                )}\n                {bestTuesdayAverage >= -21 && (\n                    <p>\n                        Best Average = {bestTuesdayAverage.toFixed(2)} (\n                        {capitalizeText(bestTuesdayAveragePlayer)})\n                    </p>\n                )}\n            </div>\n            <div>\n                <p>\n                    <b>Thursday</b>\n                </p>\n                {mostThursdayWins > 0 && (\n                    <p>\n                        Most wins = {mostThursdayWins} (\n                        {capitalizeText(mostThursdayWinsPlayer)})\n                    </p>\n                )}\n                {bestThursdayAverage >= -21 && (\n                    <p>\n                        Best Average = {bestThursdayAverage.toFixed(2)}{' '}\n                        ({capitalizeText(bestThursdayAveragePlayer)})\n                    </p>\n                )}\n            </div>\n            <div>\n                <p>\n                    <b>Saturday</b>\n                </p>\n                {mostSaturdayWins > 0 && (\n                    <p>\n                        Most wins = {mostSaturdayWins} (\n                        {capitalizeText(mostSaturdayWinsPlayer)})\n                    </p>\n                )}\n                {bestSaturdayAverage >= -21 && (\n                    <p>\n                        Best Average = {bestSaturdayAverage.toFixed(2)}{' '}\n                        ({capitalizeText(bestSaturdayAveragePlayer)})\n                    </p>\n                )}\n            </div>\n            <p>\n                * Individual team averages/ win percentage counted after minimum\n                of 6 games\n            </p>\n        </div>\n    );\n}\n\nexport default PlayerRecords;\n","import React, { useState } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport TeamStats from './teamStats';\nimport PlayerStats from './playerStats';\nimport TeamRecords from './teamRecords';\nimport PlayerRecords from './playerRecords';\nimport bowlsStats from '../data/bowlsStats.json';\n\nfunction Home() {\n    const [showPlayerStats, setShowPlayerStats] = useState(false);\n    const [showTeamStats, setShowTeamStats] = useState(false);\n    const [showPlayerRecords, setShowPlayerRecords] = useState(false);\n    const [showTeamRecords, setShowTeamRecords] = useState(false);\n\n    const playersStats = bowlsStats.playerResults;\n    const teamStats = bowlsStats.teamResults;\n\n    // TODO decide how to display this information. Maybe records together? Use a nav bar?\n    // TODO what info should I default to?\n    // TODO Handle multiple years worth of stats\n\n    function displayPlayerStats() {\n        if (showPlayerStats) {\n            setShowPlayerStats(false);\n        } else {\n            setShowPlayerStats(true);\n            setShowTeamStats(false);\n            setShowPlayerRecords(false);\n            setShowTeamRecords(false);\n        }\n    }\n\n    function displayTeamStats() {\n        if (showTeamStats) {\n            setShowTeamStats(false);\n        } else {\n            setShowTeamStats(true);\n            setShowPlayerStats(false);\n            setShowPlayerRecords(false);\n            setShowTeamRecords(false);\n        }\n    }\n\n    function displayPlayerRecords() {\n        if (showPlayerRecords) {\n            setShowPlayerRecords(false);\n        } else {\n            setShowPlayerRecords(true);\n            setShowTeamRecords(false);\n            setShowPlayerStats(false);\n            setShowTeamStats(false);\n        }\n    }\n\n    function displayTeamRecords() {\n        if (showTeamRecords) {\n            setShowTeamRecords(false);\n        } else {\n            setShowTeamRecords(true);\n            setShowPlayerRecords(false);\n            setShowPlayerStats(false);\n            setShowTeamStats(false);\n        }\n    }\n\n    return (\n        <div>\n            <Navbar fixed=\"top\" bg=\"light\" variant=\"light\">\n                <Navbar.Brand href=\"#header\">SPBC</Navbar.Brand>\n                <Nav className=\"me-auto\">\n                    <Nav.Link onSelect={displayPlayerRecords} href=\"#header\">\n                        Player Records\n                    </Nav.Link>\n                    <Nav.Link onSelect={displayTeamRecords} href=\"#header\">\n                        Team Records\n                    </Nav.Link>\n                    <Nav.Link onSelect={displayPlayerStats} href=\"#header\">\n                        Player Stats\n                    </Nav.Link>\n                    <Nav.Link onSelect={displayTeamStats} href=\"#header\">\n                        Team Stats\n                    </Nav.Link>\n                </Nav>\n            </Navbar>\n            <div id=\"header\">\n                <h1 style={{ fontSize: '4rem' }}>\n                    Stanningley Park Bowling Club\n                </h1>\n            </div>\n            {!showPlayerStats &&\n                !showTeamStats &&\n                !showTeamRecords &&\n                !showPlayerRecords && (\n                    <div>\n                        <p>\n                            Welcome to Stanningley Park Crown Green Bowling\n                            Club's website\n                        </p>\n                    </div>\n                )}\n            {showPlayerRecords && <PlayerRecords playersStats={playersStats} />}\n            {showTeamRecords && <TeamRecords stats={teamStats} />}\n            {showPlayerStats && <PlayerStats />}\n            {showTeamStats && <TeamStats />}\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/home';\nimport './app.css';\n\nfunction App() {\n    return (\n        <div id='app'>\n            <Home />\n            <link\n                rel='stylesheet'\n                href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n                integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n                crossOrigin='anonymous'\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}