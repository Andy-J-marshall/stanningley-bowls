{"version":3,"sources":["helpers/utils.js","components/individualTeamStats.js","components/combinedTeamStats.js","helpers/statsHelper.js","components/teamRecords.js","components/teamStats.js","components/players.js","components/playerRecords.js","components/playerStats.js","components/stats.js","App.js","index.js"],"names":["capitalizeText","stringArray","stringArrayAsString","forEach","originalString","index","splitString","split","word","array","charAt","toUpperCase","slice","capitalizedString","join","replace","IndividualTeamStats","props","day","stats","awayWins","homeWins","cupWins","cupLosses","awayLosses","homeLosses","homeDraws","awayDraws","stanningleyAgg","stanningleyTotalPoints","opponentAgg","opponentTotalPoints","beaten","beatenBy","drawnWith","totalDraws","totalWins","totalLosses","totalGames","id","CombinedTeamStats","combinedStats","statsArray","combinedAwayWins","combinedHomeWins","combinedCupWins","combinedAwayLosses","combinedHomeLosses","combinedCupLosses","combinedHomeDraws","combinedAwayDraws","combinedStanningleyAgg","combinedStanningleyTotalPoints","combinedOpponentAgg","combinedOpponentTotalPoints","combinedBeaten","combinedBeatenBy","combinedDrawnWith","push","combineTeamStats","TeamRecords","bestWinPercentage","bestWinPercentageTeam","bestTeamPointsPerGame","bestTeamPointsPerGameTeam","bestTeamAggPerGame","bestTeamAggPerGameTeam","fewestPointsConcededPerGame","fewestPointsConcededPerGameTeam","lowestAggConcededPerGame","lowestAggConcededPerGameTeam","wins","draws","winPercentage","gamesPerMatch","pointsPerGame","aggPerGame","pointsConcededPerGame","aggConcededPerGame","pop","toFixed","TeamStats","useState","showStats","setShowStats","buttonText","setButtonText","teamStats","bowlsStats","teamResults","mondayStats","tuesdayStats","thursdayStats","saturdayStats","Button","variant","size","onClick","Players","player","playersStats","name","playerData","totalAgg","totalAggAgainst","totalPairsAgg","totalPairsAggAgainst","totalScore","totalScoreAgainst","winningPairsPartners","losingPairsPartners","beatenByTeam","beatenOpponents","beatenTeam","dayPlayed","pairLosses","pairWins","pairsPartners","totalHomeAgg","totalHomeAggAgainst","totalAwayAgg","totalAwayAggAgainst","totalHomeScore","totalHomeScoreAgainst","totalAwayScore","totalAwayScoreAgainst","gamesPlayed","homeGamesPlayed","awayGamesPlayed","average","homeAverage","awayAverage","averageScore","averageScoreAgainst","homeAverageScore","homeAverageScoreAgainst","awayAverageScore","awayAverageScoreAgainst","pairsGames","daysPlayedCount","daysPlayed","monday","filter","toLowerCase","length","tuesday","thursday","saturday","calculateDaysPlayedCount","pairsPartnersCount","calculatePairsPartnersCount","pairsPartnersCountWins","pairsPartnersCountLosses","allPairsPartners","uniquePartners","partner","indexOf","partnersReturnObj","reduce","partnerObj","timesPaired","includes","ListGroup","Item","map","key","Math","floor","random","Object","keys","PlayerRecords","players","mostGamesPlayer","mostGames","mostWinsPlayer","mostWins","bestWinPercPlayer","bestWinPerc","bestAveragePlayer","bestAverage","bestScorePlayer","bestScore","p","playedMinGames","winPerc","score","PlayerStats","playerResults","playerName","JSON","stringify","Stats","showTeamStats","setShowTeamStats","App","style","fontSize","rel","href","integrity","crossOrigin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.471faa53.chunk.js","sourcesContent":["export function capitalizeText(stringArray) {\n    let stringArrayAsString = '';\n    stringArray.forEach((originalString, index) => {\n        const splitString = originalString.split(' ');\n        splitString.forEach((word, index, array) => {\n            array[index] = array[index].charAt(0).toUpperCase() + array[index].slice(1);\n        })\n        const capitalizedString = splitString.join(' ');\n        stringArrayAsString = index === 0 ? capitalizedString : stringArrayAsString + ', ' + capitalizedString;\n        stringArrayAsString = stringArrayAsString.replace(' And ', ' & ');\n    });\n    return stringArrayAsString;\n}\n\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction IndividualTeamStats(props) {\n    const day = props.day;\n    const stats = props.stats;\n\n    const {\n        awayWins, homeWins, cupWins, cupLosses, awayLosses, homeLosses,\n        homeDraws, awayDraws, stanningleyAgg, stanningleyTotalPoints,\n        opponentAgg, opponentTotalPoints, beaten, beatenBy, drawnWith,\n    } = stats;\n\n    const totalDraws = awayDraws + homeDraws;\n    const totalWins = awayWins + homeWins + cupWins;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return (\n        <div id={day + 'TeamResults'}>\n            <h4>Stats for {day}</h4>\n            <div id={day + 'TeamWinLosses'}>\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && <p>({homeWins} home, {awayWins} away, {cupWins} cup)</p>}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && <p>({homeLosses} home, {awayLosses} away, {cupLosses} cup)</p>}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && <p>({homeDraws} home, {awayDraws} away)</p>}\n            </div>\n            <div id={day + 'TeamAggregates'}>\n                <p>Stanningley aggregate = {stanningleyAgg}</p>\n                <p>Opponents aggregate = {opponentAgg}</p>\n                <p>Stanningley team score = {stanningleyTotalPoints}</p>\n                <p>Opponents team score = {opponentTotalPoints}</p>\n            </div>\n            <div id={day + 'TeamOpponents'}>\n                {totalWins > 0 && <p>Teams beaten = {capitalizeText(beaten)}</p>}\n                {totalLosses > 0 && <p>Teams lost to = {capitalizeText(beatenBy)}</p>}\n                {totalDraws > 0 && <p>Teams drawn with = {capitalizeText(drawnWith)}</p>}\n            </div>\n        </div>\n    );\n}\n\nexport default IndividualTeamStats;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\nimport { combineTeamStats } from '../helpers/statsHelper';\n\nfunction CombinedTeamStats(props) {\n    const stats = props.stats;\n\n    const combinedStats = combineTeamStats(stats);\n    const {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupWins,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    } = combinedStats;\n\n    return (\n        <div id='CombinedTeamResults'>\n            <h3>Combined Stats For All Teams</h3>\n            <div id='CombinedTeamWinLosses'>\n                <p>Total games = {totalGames}</p>\n                <p>Total wins = {totalWins}</p>\n                {totalWins > 0 && <p>({combinedHomeWins} home, {combinedAwayWins} away, {combinedCupWins} cup)</p>}\n                <p>Total losses = {totalLosses}</p>\n                {totalLosses > 0 && <p>({combinedHomeLosses} home, {combinedAwayLosses} away, {combinedCupLosses} cup)</p>}\n                {totalDraws > 0 && <p>Total draws = {totalDraws}</p>}\n                {totalDraws > 0 && <p>({combinedHomeDraws} home, {combinedAwayDraws} away)</p>}\n            </div>\n            <div id='CombinedTeamAggregates'>\n                <p>Stanningley aggregate = {combinedStanningleyAgg}</p>\n                <p>Opponents aggregate = {combinedOpponentAgg}</p>\n                <p>Stanningley team score = {combinedStanningleyTotalPoints}</p>\n                <p>Opponents team score = {combinedOpponentTotalPoints}</p>\n            </div>\n            <div id='CombinedTeamOpponents'>\n                {totalWins > 0 && <p>Teams beaten = {capitalizeText(combinedBeaten)}</p>}\n                {totalLosses > 0 && <p>Teams lost to = {capitalizeText(combinedBeatenBy)}</p>}\n                {totalDraws > 0 && <p>Teams drawn with = {capitalizeText(combinedDrawnWith)}</p>}\n            </div>\n        </div>\n    );\n}\n\nexport default CombinedTeamStats;\n","export function combineTeamStats(statsArray) {\n    let combinedAwayWins = 0;\n    let combinedHomeWins = 0;\n    let combinedCupWins = 0;\n    let combinedAwayLosses = 0;\n    let combinedHomeLosses = 0;\n    let combinedCupLosses = 0;\n    let combinedHomeDraws = 0;\n    let combinedAwayDraws = 0;\n    let combinedStanningleyAgg = 0;\n    let combinedStanningleyTotalPoints = 0;\n    let combinedOpponentAgg = 0;\n    let combinedOpponentTotalPoints = 0;\n    let combinedBeaten = [];\n    let combinedBeatenBy = [];\n    let combinedDrawnWith = [];\n\n    statsArray.forEach(stats => {\n        const {\n            awayWins, homeWins, cupWins, awayLosses, homeLosses, cupLosses,\n            homeDraws, awayDraws, stanningleyAgg, stanningleyTotalPoints,\n            opponentAgg, opponentTotalPoints, beaten, beatenBy, drawnWith,\n        } = stats;\n        combinedAwayWins += awayWins;\n        combinedHomeWins += homeWins;\n        combinedAwayLosses += awayLosses;\n        combinedHomeLosses += homeLosses;\n        combinedHomeDraws += homeDraws;\n        combinedAwayDraws += awayDraws;\n        combinedCupWins += cupWins;\n        combinedCupLosses += cupLosses;\n        combinedStanningleyAgg += stanningleyAgg;\n        combinedStanningleyTotalPoints += stanningleyTotalPoints;\n        combinedOpponentAgg += opponentAgg;\n        combinedOpponentTotalPoints += opponentTotalPoints;\n        combinedBeaten.push(...beaten);\n        combinedBeatenBy.push(...beatenBy);\n        combinedDrawnWith.push(...drawnWith);\n    });\n\n    const totalDraws = combinedAwayDraws + combinedHomeDraws;\n    const totalWins = combinedAwayWins + combinedHomeWins + combinedCupWins;\n    const totalLosses = combinedAwayLosses + combinedHomeLosses + combinedCupLosses;\n    const totalGames = totalDraws + totalWins + totalLosses;\n\n    return {\n        combinedAwayWins,\n        combinedHomeWins,\n        combinedCupWins,\n        combinedAwayLosses,\n        combinedHomeLosses,\n        combinedCupLosses,\n        combinedHomeDraws,\n        combinedAwayDraws,\n        combinedStanningleyAgg,\n        combinedStanningleyTotalPoints,\n        combinedOpponentAgg,\n        combinedOpponentTotalPoints,\n        combinedBeaten,\n        combinedBeatenBy,\n        combinedDrawnWith,\n        totalDraws,\n        totalWins,\n        totalLosses,\n        totalGames,\n    }\n}\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction TeamRecords(props) {\n    const statsArray = props.stats;\n\n    let bestWinPercentage = -1;\n    let bestWinPercentageTeam = [];\n    let bestTeamPointsPerGame = -1;\n    let bestTeamPointsPerGameTeam = [];\n    let bestTeamAggPerGame = -1;\n    let bestTeamAggPerGameTeam = [];\n    let fewestPointsConcededPerGame = 100;\n    let fewestPointsConcededPerGameTeam = [];\n    let lowestAggConcededPerGame = 1000;\n    let lowestAggConcededPerGameTeam = [];\n\n    statsArray.forEach(stats => {\n        const {\n            day, awayWins, homeWins, cupWins, awayLosses, homeLosses, cupLosses,\n            homeDraws, awayDraws, stanningleyAgg, stanningleyTotalPoints,\n            opponentAgg, opponentTotalPoints,\n        } = stats;\n        const wins = awayWins + homeWins + cupWins;\n        const losses = awayLosses + homeLosses + cupLosses;\n        const draws = awayDraws + homeDraws;\n        const drawPoints = draws > 0 ? draws * 0.5 : 0;\n        const totalGames = wins + losses + homeDraws + awayDraws;\n        const winPercentage = ((wins + drawPoints) / totalGames) * 100;\n\n        const gamesPerMatch = day === 'Monday' ? 6 : 8;\n        const pointsPerGame = (stanningleyTotalPoints / gamesPerMatch) / (totalGames - cupLosses - cupWins); // cup games are decided on pure aggregate\n        const aggPerGame = (stanningleyAgg / gamesPerMatch) / totalGames;\n        const pointsConcededPerGame = (opponentTotalPoints / gamesPerMatch) / (totalGames - cupLosses - cupWins);\n        const aggConcededPerGame = (opponentAgg / gamesPerMatch) / totalGames;\n\n        if (aggPerGame >= bestTeamAggPerGame) {\n            if (aggPerGame !== bestTeamAggPerGame) {\n                bestTeamAggPerGameTeam.pop();\n            }\n            bestTeamAggPerGameTeam.push(day);\n            bestTeamAggPerGame = aggPerGame;\n        }\n        if (pointsPerGame >= bestTeamPointsPerGame) {\n            if (pointsPerGame !== bestTeamPointsPerGame) {\n                bestTeamPointsPerGameTeam.pop();\n            }\n            bestTeamPointsPerGameTeam.push(day);\n            bestTeamPointsPerGame = pointsPerGame;\n        }\n        if (pointsConcededPerGame <= fewestPointsConcededPerGame) {\n            if (pointsConcededPerGame !== fewestPointsConcededPerGame) {\n                fewestPointsConcededPerGameTeam.pop();\n            }\n            fewestPointsConcededPerGameTeam.push(day);\n            fewestPointsConcededPerGame = pointsConcededPerGame;\n        }\n        if (aggConcededPerGame <= lowestAggConcededPerGame) {\n            if (aggConcededPerGame !== lowestAggConcededPerGame) {\n                lowestAggConcededPerGameTeam.pop();\n            }\n            lowestAggConcededPerGameTeam.push(day);\n            lowestAggConcededPerGame = aggConcededPerGame;\n        }\n        if (winPercentage >= bestWinPercentage) {\n            if (winPercentage !== bestWinPercentage) {\n                bestWinPercentageTeam.pop();\n            }\n            bestWinPercentageTeam.push(day);\n            bestWinPercentage = winPercentage;\n        }\n    });\n\n    return (\n        <div id='TeamRecords'>\n            <h3>Team Records</h3>\n            <p>Best win percentage = {bestWinPercentage.toFixed(0)}%</p>\n            <p>Best win percentage Team = {capitalizeText(bestWinPercentageTeam)}</p>\n            <p>Best points per game = {bestTeamPointsPerGame.toFixed(1)}/5</p>\n            <p>Best points per game team = {capitalizeText(bestTeamPointsPerGameTeam)}</p>\n            <p>Best agg per game = {bestTeamAggPerGame.toFixed(1)}/21</p>\n            <p>Best agg per game team = {capitalizeText(bestTeamAggPerGameTeam)}</p>\n            <p>Fewest points conceded per game = {fewestPointsConcededPerGame.toFixed(1)}/5</p>\n            <p>Fewest points conceded per game team = {capitalizeText(fewestPointsConcededPerGameTeam)}</p>\n            <p>Fewest aggregated points conceded per game = {lowestAggConcededPerGame.toFixed(1)}/21</p>\n            <p>Fewest aggregated points conceded per game team = {capitalizeText(lowestAggConcededPerGameTeam)}</p>\n        </div>\n    );\n}\n\nexport default TeamRecords;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport IndividualTeamStats from './individualTeamStats';\nimport CombinedTeamStats from './combinedTeamStats';\nimport TeamRecords from './teamRecords';\nimport bowlsStats from '../helpers/bowlsStats.json'\n\nfunction TeamStats() {\n    const [showStats, setShowStats] = useState(false);\n    const [buttonText, setButtonText] = useState('Show Team Stats');\n\n    const teamStats = bowlsStats.teamResults;\n    // TODO get the teamStats in a better way that using array\n    const mondayStats = teamStats[0]\n    const tuesdayStats = teamStats[1]\n    const thursdayStats = teamStats[2]\n    const saturdayStats = teamStats[3]\n\n\n    function toggleTeamStats() {\n        if (showStats) {\n            setShowStats(false);\n            setButtonText('Show Team Stats')\n        } else {\n            setShowStats(true);\n            setButtonText('Hide Team Stats')\n        }\n    }\n\n    return (\n        <div id='TeamStats'>\n            <h1>Team Stats</h1>\n            <TeamRecords\n                stats={teamStats}\n            />\n            <CombinedTeamStats\n                stats={teamStats}\n            />\n\n            <Button variant='light' size='lg' onClick={toggleTeamStats}>{buttonText}</Button>\n            <br />\n            <br />\n\n            {showStats && <div>\n                <IndividualTeamStats\n                    day='Monday'\n                    stats={mondayStats}\n                />\n                <IndividualTeamStats\n                    day='Tuesday'\n                    stats={tuesdayStats}\n                />\n                <IndividualTeamStats\n                    day='Thursday'\n                    stats={thursdayStats}\n                />\n                <IndividualTeamStats\n                    day='Saturday'\n                    stats={saturdayStats}\n                />\n            </div>}\n        </div>\n    );\n}\n\nexport default TeamStats;\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { capitalizeText } from '../helpers/utils';\n\nfunction Players(props) {\n    const index = props.index;\n    const player = props.player;\n    const playersStats = props.playersStats;\n    const name = props.name;\n\n    const playerData = playersStats[player];\n    let {\n        totalAgg, totalAggAgainst, totalPairsAgg, totalPairsAggAgainst, totalScore, totalScoreAgainst, awayLosses, homeLosses,\n        cupLosses, homeWins, awayWins, cupWins, winningPairsPartners, losingPairsPartners, beatenBy, beatenByTeam,\n        beatenOpponents, beatenTeam, dayPlayed, pairLosses, pairWins, pairsPartners, totalHomeAgg, totalHomeAggAgainst,\n        totalAwayAgg, totalAwayAggAgainst, totalHomeScore, totalHomeScoreAgainst, totalAwayScore, totalAwayScoreAgainst,\n    } = playerData;\n    const totalLosses = awayLosses + homeLosses + cupLosses;\n    const totalWins = awayWins + homeWins + cupWins;\n    const gamesPlayed = totalLosses + totalWins;\n    const homeGamesPlayed = homeWins + homeLosses;\n    const awayGamesPlayed = awayWins + awayLosses;\n    const average = (totalAgg - totalAggAgainst) / gamesPlayed;\n    const homeAverage = (totalHomeAgg - totalHomeAggAgainst) / (homeGamesPlayed);\n    const awayAverage = (totalAwayAgg - totalAwayAggAgainst) / (awayGamesPlayed);\n    const averageScore = (totalScore) / gamesPlayed;\n    const averageScoreAgainst = (totalScoreAgainst) / gamesPlayed;\n    const homeAverageScore = (totalHomeScore) / homeGamesPlayed;\n    const homeAverageScoreAgainst = (totalHomeScoreAgainst) / homeGamesPlayed;\n    const awayAverageScore = (totalAwayScore) / awayGamesPlayed;\n    const awayAverageScoreAgainst = (totalAwayScoreAgainst) / awayGamesPlayed;\n    beatenBy = capitalizeText(beatenBy);\n    beatenOpponents = capitalizeText(beatenOpponents);\n    beatenByTeam = capitalizeText(beatenByTeam);\n    beatenTeam = capitalizeText(beatenTeam);\n    const pairsGames = pairLosses + pairWins;\n\n    const daysPlayedCount = calculateDaysPlayedCount(dayPlayed);\n    const pairsPartnersCount = calculatePairsPartnersCount(pairsPartners)\n    const pairsPartnersCountWins = calculatePairsPartnersCount(winningPairsPartners)\n    const pairsPartnersCountLosses = calculatePairsPartnersCount(losingPairsPartners)\n\n    function calculatePairsPartnersCount(allPairsPartners) {\n        const uniquePartners = allPairsPartners.filter((partner, index) => {\n            return allPairsPartners.indexOf(partner) === index;\n        });\n        const partnersReturnObj = uniquePartners.reduce((partnerObj, player) => {\n            partnerObj[player] = { timesPaired: 0 };\n            return partnerObj;\n        }, {});\n\n        allPairsPartners.forEach(partner => {\n            if (uniquePartners.includes(partner)) {\n                partnersReturnObj[partner].timesPaired += 1;\n            }\n        })\n        return partnersReturnObj;\n    }\n\n    function calculateDaysPlayedCount(daysPlayed) {\n        const monday = daysPlayed.filter(day => day.toLowerCase() === 'monday').length;\n        const tuesday = daysPlayed.filter(day => day.toLowerCase() === 'tuesday').length;\n        const thursday = daysPlayed.filter(day => day.toLowerCase() === 'thursday').length;\n        const saturday = daysPlayed.filter(day => day.toLowerCase() === 'saturday').length;\n\n        const returnObj = [\n            { day: 'Monday', gamesPlayed: monday },\n            { day: 'Tuesday', gamesPlayed: tuesday },\n            { day: 'Thursday', gamesPlayed: thursday },\n            { day: 'Saturday', gamesPlayed: saturday }\n        ];\n\n        return returnObj.filter(day => day.gamesPlayed > 0);\n    }\n\n    // TODO handle plurals\n    return (\n        <div>\n            < ListGroup.Item key={index}>\n                <div>\n                    <h4>{capitalizeText([name])}</h4>\n                    {gamesPlayed === 0 && <p>No games played</p>}\n                    {gamesPlayed > 0 && <div>\n                        <h5>Games</h5>\n                        <p>{gamesPlayed} games played in total</p>\n                        {daysPlayedCount.map(day => {\n                            const key = Math.floor(Math.random() * 100000 + index);\n                            return <p key={key}>{day.gamesPlayed} games played on {day.day}</p>\n                        })}\n                        {pairsGames > 0 && <p>{pairsGames} pairs games played</p>}\n\n                        <h5>Results</h5>\n                        {totalWins > 0 && <p>{totalWins} wins ({homeWins} home, {awayWins} away, {cupWins} cup)</p>}\n                        {totalLosses > 0 && <p>{totalLosses} losses ({homeLosses} home, {awayLosses} away, {cupLosses} cup)</p>}\n                        <p>{(totalWins / gamesPlayed * 100).toFixed(0)}% win percentage</p>\n\n                        {pairsGames > 0 && <div>\n                            <h5>Pairs</h5>\n                            <p>{pairsGames} pairs games played</p>\n                            <p>{pairWins} pairs wins</p>\n                            <p>{pairLosses} pairs losses</p>\n                            {pairsPartners.length > 0 && Object.keys(pairsPartnersCount).map(partner => {\n                                const key = Math.floor(Math.random() * 100000 + index);\n                                return <p key={key}>{pairsPartnersCount[partner].timesPaired} games played with {partner}</p>\n                            })}\n                            {pairWins > 0 && Object.keys(pairsPartnersCountWins).map(partner => {\n                                const key = Math.floor(Math.random() * 100000 + index);\n                                return <p key={key}>{pairsPartnersCountWins[partner].timesPaired} games won with {partner}</p>\n                            })}\n                            {pairLosses > 0 && Object.keys(pairsPartnersCountLosses).map(partner => {\n                                const key = Math.floor(Math.random() * 100000 + index);\n                                return <p key={key}>{pairsPartnersCountLosses[partner].timesPaired} games lost with {partner}</p>\n                            })}\n                        </div>}\n\n                        <h5>Opponents</h5>\n                        {beatenOpponents.length > 0 && <p>Beaten opponents = {beatenOpponents}</p>}\n                        {beatenBy.length > 0 && <p>Defeated by = {beatenBy}</p>}\n                        {beatenTeam.length > 0 && <p>Beaten team = {beatenTeam}</p>}\n                        {beatenByTeam.length > 0 && <p>Teams lost to = {beatenByTeam}</p>}\n\n                        <h5>Averages</h5>\n                        <p>Average = {average.toFixed(2)}</p>\n                        <p>Home average = {homeAverage.toFixed(2)}</p>\n                        <p>Away average = {awayAverage.toFixed(2)}</p>\n\n                        <p>Average score = {averageScore.toFixed(2)} / 5</p>\n                        <p>Average opponents score = {averageScoreAgainst.toFixed(2)} / 5</p>\n                        <p>Average home score = {homeAverageScore.toFixed(2)} / 5</p>\n                        <p>Average home opponents score = {homeAverageScoreAgainst.toFixed(2)} / 5</p>\n                        <p>Average away score = {awayAverageScore.toFixed(2)} / 5</p>\n                        <p>Average away opponents score = {awayAverageScoreAgainst.toFixed(2)} / 5</p>\n\n                        <h5>Aggregates</h5>\n                        <p><b>Points</b></p>\n                        <p>Total aggregate scored = {totalAgg} / {gamesPlayed * 21}</p>\n                        <p>Total aggregate conceded = {totalAggAgainst} / {gamesPlayed * 21}</p>\n                        <p>Total home aggregate scored = {totalHomeAgg} / {homeGamesPlayed * 21}</p>\n                        <p>Total home aggregate conceded = {totalHomeAggAgainst} / {homeGamesPlayed * 21}</p>\n                        <p>Total away aggregate scored = {totalAwayAgg} / {awayGamesPlayed * 21}</p>\n                        <p>Total away aggregate conceded = {totalAwayAggAgainst} / {awayGamesPlayed * 21}</p>\n                        {pairsGames > 0 && <p>Total pairs aggregate scored = {totalPairsAgg} / {pairsGames * 21}</p>}\n                        {pairsGames > 0 && <p>Total pairs aggregate conceded = {totalPairsAggAgainst} / {pairsGames * 21}</p>}\n\n                        <p><b>Team Points</b></p>\n                        <p>Total points scored = {totalScore} / {gamesPlayed * 5}</p>\n                        <p>Total points conceded = {totalScoreAgainst} / {gamesPlayed * 5}</p>\n                        <p>Total home points scored = {totalHomeScore} / {homeGamesPlayed * 5}</p>\n                        <p>Total home points conceded = {totalHomeScoreAgainst} / {homeGamesPlayed * 5}</p>\n                        <p>Total away points scored = {totalAwayScore} / {awayGamesPlayed * 5}</p>\n                        <p>Total away points conceded = {totalAwayScoreAgainst} / {awayGamesPlayed * 5}</p>\n                    </div>}\n                </div>\n            </ListGroup.Item>\n        </div>\n    );\n}\n\nexport default Players;\n","import React from 'react';\nimport { capitalizeText } from '../helpers/utils';\n\n// let {\n//     totalAgg, totalAggAgainst, totalPairsAgg, totalPairsAggAgainst, totalScore, totalScoreAgainst, awayLosses, homeLosses,\n//     cupLosses, homeWins, awayWins, cupWins, winningPairsPartners, losingPairsPartners, beatenBy, beatenByTeam,\n//     beatenOpponents, beatenTeam, dayPlayed, pairLosses, pairWins, pairsPartners, totalHomeAgg, totalHomeAggAgainst,\n//     totalAwayAgg, totalAwayAggAgainst, totalHomeScore, totalHomeScoreAgainst, totalAwayScore, totalAwayScoreAgainst,\n// } = playerData;\n\nfunction PlayerRecords(props) {\n    const playersStats = props.playersStats;\n    const players = Object.keys(playersStats);\n\n    let mostGamesPlayer = [];\n    let mostGames = 0;\n    let mostWinsPlayer = [];\n    let mostWins = 0;\n    let bestWinPercPlayer = [];\n    let bestWinPerc = 0;\n    let bestAveragePlayer = [];\n    let bestAverage = 0;\n    let bestScorePlayer = [];\n    let bestScore = 0;\n\n    players.forEach(player => {\n        const p = playersStats[player];\n        const totalWins = p.awayWins + p.homeWins + p.cupWins;\n        const totalLosses = p.awayLosses + p.homeLosses + p.cupLosses;\n        const totalGames = totalWins + totalLosses;\n        \n        const playedMinGames = totalGames >= 6 ? true : false;\n        // TODO the python script is picking up players matches for other teams e.g. Mario/ Shirley\n        if (totalGames >= mostGames) {\n            if (totalGames > mostGames) {\n                mostGamesPlayer = [];\n                mostGames = totalGames;\n            }\n            mostGamesPlayer.push(player);\n        }\n        if (totalWins >= mostWins) {\n            if (totalWins > mostWins) {\n                mostWinsPlayer = [];\n                mostWins = totalWins;\n            }\n            mostWinsPlayer.push(player);\n        }\n        const winPerc = totalWins / totalGames * 100;\n        if (winPerc >= bestWinPerc && playedMinGames) {\n            if (winPerc > bestWinPerc) {\n                bestWinPercPlayer = [];\n                bestWinPerc = winPerc;\n            }\n            bestWinPercPlayer.push(player);\n        }\n        const average = (p.totalAgg - p.totalAggAgainst) / totalGames;\n        if (average >= bestAverage && playedMinGames) {\n            if (average > bestAverage) {\n                bestAveragePlayer = [];\n                bestAverage = average;\n            }\n            bestAveragePlayer.push(player);\n        }\n\n        const score = p.totalScore / totalGames;\n        if (score >= bestScore && playedMinGames) {\n            if (score > bestScore) {\n                bestScorePlayer = [];\n                bestScore = score;\n            }\n            bestScorePlayer.push(player);\n        }\n    })\n\n    return (\n        <div>\n            <h3>Player Records</h3>\n            <p>Most games played = {capitalizeText(mostGamesPlayer)} ({mostGames})</p>\n            <p>Most wins = {capitalizeText(mostWinsPlayer)} ({mostWins})</p>\n            <p>Best win percentage = {capitalizeText(bestWinPercPlayer)} ({bestWinPerc.toFixed(0)}% - min 6 games)</p>\n            <p>Best average = {capitalizeText(bestAveragePlayer)} ({bestAverage.toFixed(2)} - min 6 games)</p>\n            <p>Best team score per game = {capitalizeText(bestScorePlayer)} ({bestScore.toFixed(2)} - min 6 games)</p>\n        </div>\n    );\n}\n\nexport default PlayerRecords;\n","import React, { useState } from 'react';\nimport Player from './players';\nimport PlayerRecords from './playerRecords';\nimport { ListGroup, Button } from 'react-bootstrap';\nimport bowlsStats from '../helpers/bowlsStats.json'\n\nfunction PlayerStats() {\n    const [showStats, setShowStats] = useState(false);\n    const [buttonText, setButtonText] = useState('Show Player Stats');\n\n    const playersStats = bowlsStats.playerResults;\n    const keys = Object.keys(playersStats);\n\n\n    function togglePlayerStats() {\n        if (showStats) {\n            setShowStats(false);\n            setButtonText('Show Player Stats')\n        } else {\n            setShowStats(true);\n            setButtonText('Hide Player Stats')\n        }\n    }\n\n    return (\n        <div>\n            <h1>Player Stats</h1>\n            <PlayerRecords\n                playersStats={playersStats}\n            />\n            <Button variant='light' size='lg' onClick={togglePlayerStats}>{buttonText}</Button>\n            <br />\n            <br />\n            {showStats && <div id='player-stats'>\n                <ListGroup>\n                    {keys.map((p, index) => {\n                        const playerName = keys[index];\n                        return <Player\n                            key={index}\n                            index={index}\n                            player={p}\n                            name={playerName}\n                            playersStats={playersStats}\n                        >{JSON.stringify(playersStats[p])}</Player>\n                    })}\n                </ListGroup>\n            </div>}\n        </div >\n    );\n}\n\nexport default PlayerStats;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport TeamStats from './teamStats';\nimport PlayerStats from './playerStats';\n\nfunction Stats() {\n    const [showStats, setShowStats] = useState(false);\n    const [showTeamStats, setShowTeamStats] = useState(false);\n\n    // TODO decide how to display this information. Maybe records together? Use a nav bar?\n    // TODO what info should I default to?\n\n    function displayPlayerStats() {\n        if (showStats) {\n            setShowStats(false);\n        } else {\n            setShowStats(true);\n        }\n    }\n\n\n    function displayTeamStats() {\n        if (showStats) {\n            setShowTeamStats(false);\n        } else {\n            setShowTeamStats(true);\n        }\n    }\n\n\n    return (\n        <div>\n            <Button variant='light' size='lg' onClick={displayPlayerStats}>{'Player Stats'}</Button>\n            <Button variant='light' size='lg' onClick={displayTeamStats}>{'Team Stats'}</Button>\n            <br />\n            <br />\n            {showStats && <PlayerStats />}\n            {showTeamStats && <TeamStats />}\n        </div>\n    );\n}\n\nexport default Stats;\n","import React from 'react';\nimport Stats from './components/stats';\nimport './app.css'\n\nfunction App() {\n\n  return (\n    <div id='app'>\n      <div id='header'>\n        <h1 style={{ fontSize: '4rem' }}>Stanningley Crown Green Bowling Club</h1>\n      </div>\n      <Stats />\n      <link\n        rel='stylesheet'\n        href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css'\n        integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3'\n        crossOrigin='anonymous'\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}